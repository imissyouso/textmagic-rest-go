---
swagger: "2.0"
info:
  description: "# Overview\n## Introduction\ntest\n<img style=\"float: right; margin-left:\
    \ 10px; width: 100px;\" src=\"images/phone.png\">\nTextMagic SMS API is a platform\
    \ for building your own messaging app using our messaging infrastructure.\nIt\
    \ allows you to send and receive SMS text messages, query information about inbound\
    \ and outbound messages,\nmanage contacts, create templates (i.e. message formats\
    \ and static texts) and schedule recurrent SMS\nmessages as well as process bulk\
    \ SMS messages.\n<button name=\"button\" onclick=\"http://www.google.com\" class=\"\
    btn\">Try TextMagic API for Free</button>\n\n### Two Ways to Use TextMagic API\n\
    * [REST API](https://www.textmagic.com/docs/api/start/) – get full access to TextMagic’\
    s messaging gateway features\n* [Email to SMS API](https://www.textmagic.com/docs/api/send-email-to-sms/)\
    \ – set up two-way SMS communication without the need to write any additional\
    \ code\n\n### Code Libraries\nWe have created a set of client libraries for the\
    \ most popular programming languages (such as REST API Java and REST\nAPI PHP).\
    \ These libraries allow you to integrate our API into your code in minutes. Just\
    \ choose your preferred language\nto get started:\n\n## Getting started\nGet Started\
    \ with the TextMagic REST API\nTo start sending text messages using the TextMagic\
    \ REST API, just follow these steps:\n1. Generate the API credentials\n1. Connect\
    \ to our API endpoint\nThis page provides all the information you need to get\
    \ started. Here, we explain the following steps:\n\nHow to obtain the API credentials\n\
    The API endpoint\nHow the REST API works\nThe next step\nHow to obtain the API\
    \ credentials\n\n### How to obtain the API credentials\nTo start sending text\
    \ messages, you need to create an API key. API keys are similar to an account\
    \ password; the difference is that an API key only provides access to the API:\
    \ you cannot log in to TextMagic Online using the API key.\n\nYour program sends\
    \ the login credentials with each API request as HTTP headers: `X-TM-Username`\
    \ is your TextMagic username, while `X-TM-Key` is your API key.\n\nHow to obtain\
    \ an API key:\n\n1. Log in to TextMagic (or start a free trial if you haven’t\
    \ registered yet).\n1. Go to the API settings page.\n1. Click the Add new API\
    \ key button.\n1. Enter an app name for this key. Note, it’s just a label, so\
    \ pick any name.\n1. Click Generate new key.\n1. You should now see your new API\
    \ key in the green notification banner above the table:\n\n![alt text](images/credentials.png)\n\
    \n> Note for API v1 users\n> V1 keys are not compatible with the V2 version of\
    \ the TextMagic REST API, so you will need to generate a new API key to use the\
    \ V2 endpoint.\n\n### The API endpoint\nThe TextMagic REST API endpoint is:\n\
    ```\nhttps://rest.textmagic.com/api/v2\n```\nAll the URLs referenced in this documentation\
    \ should use this base URL.\n\n### How the REST API works\nREST APIs use the HTTP\
    \ protocol to send and receive messages. REST messages are usually encoded as\
    \ JSON documents and are an improvement over older methods such as the XML based\
    \ SOAP protocol. REST APIs use the same set of methods that web browsers use:\
    \ POST, GET, PUT or DELETE. These correspond to the CRUD operations: create, read,\
    \ update and delete. Often, REST URIs provide direct CRUD access to entities or\
    \ collections of entities, for example: http://api.foo.com/people. In this instance,\
    \ to delete a person’s endpoint, you might simply call the endpoint DELETE http://api.foo.com/people/{id}.\
    \ REST makes these types of operations simple.\n\n> Example\n>\n> Let’s take the\
    \ entity most often used in messaging: contacts. Imagine you want to perform operations\
    \ on your contacts list: well, it’s only a matter of calling the following endpoints:\n\
    > * GET /api/v2/contacts (get all of your contacts)\n> * GET /api/v2/contacts/{id}\
    \ (get a specific contact)\n> * POST /api/v2/contacts (create a new contact)\n\
    > * PUT /api/v2/contacts/{id} (update an existing contact)\n> * DELETE /api/v2/contacts/{id}\
    \ (delete an existing contact)\nIt’s that simple! In fact, that’s all you need\
    \ to do to manage the contacts in your TextMagic account!\n\n## Sandbox\nSandbox\
    \ is a tool to test TextMagic REST API requests without the need to install any\
    \ applications or write any code.\nHere, we explain the following details about\
    \ Sandbox:\n* The credentials area\n* Command documentation\n* How it works\n\n\
    <a href=\"\">Go to TextMagic Sandbox</a>\n\n### The credentials area\nTo make\
    \ requests using your TextMagic account, you need to enter your account username\
    \ and your API key into\nthe corresponding fields. You may also Save them in your\
    \ browser or press Clear to erase them.\n\n![alt text](images/sandbox.png)\n"
  version: "2"
  title: "TextMagic API Documentation"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "API Support"
    url: "http://docs.textmagictesting.com/"
    email: "support@textmagi.biz"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://www.textmagic.com/wp-content/themes/textmagic-genesis/assets/vendor/textmagic/marketing/css/../images/logo/logo.svg"
    altText: "TextMagic"
host: "my.textmagic.com"
tags:
- name: "Outbound Messages"
  description: "### How to send a single text message\n\nTo send a simple text message\
    \ to one recipient, you should set only the `text` and the `phones` parameters.\
    \ `text` should\ncontain that desired text and `phones` should be set to the recipient’\
    s international phone number.\n\nFor example, to send an SMS message with the\
    \ text “I love TextMagic” to the phone number +44 (0) 7 860021130, use the command:\n\
    \n> POST https://rest.textmagic.com/api/v2/messages\n\nwith the following parameters:\n\
    \n| Parameter | Value |\n| --------- | ----- |\n| text |I love TextMagic (don’\
    t forget to urlencode your string!) |\n| phones | 447860021130 |\n\nYou will receive\
    \ a result like this:\n\n| Parameter | Example |\n| --------- | ------- |\n| id\
    \ | 49576009 |\n| href | /api/v2/messages/49576009 |\n| type | message |\n| sessionId\
    \ | 34436600 |\n| bulkId | null |\n| messageId | 49576009 |\n| scheduleId | null\
    \ |\n\nAs long as you have sent a message to at least one recipient, the TextMagic\
    \ API will return not only the session ID,\nbut also the single message ID. Also,\
    \ you can watch for the delivery status changes using this ID without\nfetching\
    \ session messages first. Since this is not a bulk session or scheduled message,\n\
    `bulkId` and `scheduleId` are null.\n\n### How to send bulk text messages\nTODO\n\
    \n### Sending more than 1,000 messages in one session\nTODO\n\n### How to send\
    \ a text message with an attachment\nTODO\n\n### Delivery status callback\n"
  x-displayName: "Outgoing messages\n"
schemes:
- "http"
- "https"
consumes:
- "application/json"
produces:
- "application/json"
security:
- BasicAuth: []
paths:
  /api/v2/auth:
    post:
      tags:
      - "Authentication"
      summary: "Authenticate user by given username and password."
      description: "Returning a username and token that you should pass to the all\
        \ requests (in X-TM-Username and X-TM-Key, respectively)"
      operationId: "doAuth"
      parameters:
      - in: "body"
        name: "DoAuthInputObject"
        required: true
        schema:
          $ref: "#/definitions/DoAuthInputObject"
        x-exportParamName: "DoAuthInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/DoAuthResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
      security: []
      x-code-samples:
      - lang: "PHP"
        source: "require_once(__DIR__ . '/vendor/autoload.php');\n\n$apiInstance =\
          \ new TextMagic\\Api\\TextMagicApi(\n    // If you want use custom http\
          \ client, pass your client which implements `GuzzleHttp\\ClientInterface`.\n\
          \    // This is optional, `GuzzleHttp\\Client` will be used as default.\n\
          \    new GuzzleHttp\\Client()\n);\n$doAuthInputObject = new \\TextMagic\\\
          Models\\DoAuthInputObject(); // \\TextMagic\\Models\\DoAuthInputObject |\n\
          $xIgnoreNullValues = true; // bool |\n\ntry {\n    $result = $apiInstance->doAuth($doAuthInputObject,\
          \ $xIgnoreNullValues);\n    print_r($result);\n} catch (Exception $e) {\n\
          \    echo 'Exception when calling TextMagicApi->doAuth: ', $e->getMessage(),\
          \ PHP_EOL;\n}\n"
  /api/v2/timezones:
    get:
      tags:
      - "Common"
      summary: "Return all available timezone IDs."
      operationId: "getTimezones"
      parameters:
      - name: "full"
        in: "query"
        description: "Return full info about timezones in array (0 or 1). Default\
          \ is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Full"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            example:
            - id: 3
              name: "(UTC -11:00): Pacific/Samoa"
              offset: -39600
              timezone: "Pacific/Samoa"
            - id: 2
              name: "(UTC -11:00): Pacific/Midway"
              offset: -39600
              timezone: "Pacific/Midway"
            - id: 4
              name: "(UTC -10:00): Pacific/Tahiti"
              offset: -36000
              timezone: "Pacific/Tahiti"
            - id: 5
              name: "(UTC -10:00): Pacific/Honolulu"
              offset: -36000
              timezone: "Pacific/Honolulu"
            - id: 6
              name: "(UTC -09:30): Pacific/Marquesas"
              offset: -34200
              timezone: "Pacific/Marquesas"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/ping:
    get:
      tags:
      - "Common"
      summary: "Just does a pong."
      operationId: "ping"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/PingResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/disallowed-rules:
    get:
      tags:
      - "User"
      summary: "Get an array of all rules that are disallowed to the current account."
      operationId: "getDisallowedRules"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "array"
            items:
              type: "string"
            example:
            - "SEND_MESSAGES"
            - "MAKE_CALLS"
            - "EMAIL_LOOKUP"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/push/tokens:
    get:
      tags:
      - "Integration"
      summary: "Get all device tokens assigned to the current account"
      operationId: "getPushTokens"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetPushTokensResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Integration"
      summary: "Add or update a device token."
      operationId: "createPushToken"
      parameters:
      - in: "body"
        name: "CreatePushTokenInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreatePushTokenInputObject"
        x-exportParamName: "CreatePushTokenInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when created with success."
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/push/tokens/{type}/{deviceId}:
    delete:
      tags:
      - "Integration"
      summary: "Delete a push notification device token."
      operationId: "deletePushToken"
      produces: []
      parameters:
      - name: "type"
        in: "path"
        required: true
        type: "string"
        default: "a"
        x-exportParamName: "Type_"
      - name: "deviceId"
        in: "path"
        required: true
        type: "integer"
        default: 123
        x-exportParamName: "DeviceId"
      responses:
        204:
          description: "Returned when deleted with success"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/state:
    get:
      tags:
      - "Common"
      summary: "Get current entities state"
      operationId: "getState"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetStateResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/versions:
    get:
      tags:
      - "Common"
      summary: "Get minimal valid apps versions"
      operationId: "getVersions"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetVersionsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/lookups/{phone}:
    get:
      tags:
      - "Tools"
      summary: "Carrier Lookup"
      operationId: "doCarrierLookup"
      parameters:
      - name: "phone"
        in: "path"
        required: true
        type: "string"
        x-example: "1-541-754-3010"
        x-exportParamName: "Phone"
      - name: "country"
        in: "query"
        description: "Country code for local formatted numbers"
        required: false
        type: "string"
        default: "US"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/DoCarrierLookupResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        429:
          description: "Returned when number of queries per second too much"
  /api/v2/countries:
    get:
      tags:
      - "Common"
      summary: "Return list of countries."
      operationId: "getCountries"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Country"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user:
    get:
      tags:
      - "User"
      summary: "Get current user info."
      operationId: "getCurrentUser"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    put:
      tags:
      - "User"
      summary: "Update current user info."
      operationId: "updateCurrentUser"
      parameters:
      - in: "body"
        name: "UpdateCurrentUserInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateCurrentUserInputObject"
        x-exportParamName: "UpdateCurrentUserInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Updated with success"
          schema:
            $ref: "#/definitions/UpdateCurrentUserResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/avatar:
    post:
      tags:
      - "User"
      summary: "Add an avatar for the current user."
      operationId: "uploadAvatar"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "image"
        in: "formData"
        description: "User avatar. Should be PNG or JPG file not more than 10 MB"
        required: true
        type: "file"
        format: "binary"
        x-exportParamName: "Image"
      responses:
        201:
          description: "Returned when successful"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    delete:
      tags:
      - "User"
      summary: "Delete an avatar for the current user.\\"
      operationId: "deleteAvatar"
      produces: []
      parameters: []
      responses:
        204:
          description: "Avatar has been deleted with success"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/phone/verification:
    get:
      tags:
      - "Authentication"
      summary: "Send user phone verification"
      operationId: "sendPhoneVerificationCode"
      parameters: []
      responses:
        200:
          description: "Verification SMS has been sent"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    put:
      tags:
      - "Authentication"
      summary: "Check user phone verification code"
      operationId: "checkPhoneVerificationCode"
      parameters:
      - in: "body"
        name: "CheckPhoneVerificationCodeInputObject"
        required: true
        schema:
          $ref: "#/definitions/CheckPhoneVerificationCodeInputObject"
        x-exportParamName: "CheckPhoneVerificationCodeInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          description: "Verification code has been approved with success"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/email/verification:
    get:
      tags:
      - "Authentication"
      summary: "Send user email verification"
      operationId: "sendEmailVerificationCode"
      parameters: []
      responses:
        200:
          description: "Verification Email has been sent"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/password/change:
    put:
      tags:
      - "Authentication"
      summary: "Change user password."
      operationId: "updatePassword"
      produces: []
      parameters:
      - in: "body"
        name: "UpdatePasswordInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdatePasswordInputObject"
        x-exportParamName: "UpdatePasswordInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          description: "Password has been updated with success"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/sources:
    get:
      tags:
      - "User Settings"
      summary: "Get all available sender setting options which could be used in \"\
        from\" parameter of POST messages method."
      operationId: "getAvailableSenderSettingOptions"
      parameters:
      - name: "country"
        in: "query"
        description: "Return sender setting options available in specific country\
          \ only. Two upper case characters"
        required: false
        type: "string"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Available sender setting options returned with success"
          schema:
            $ref: "#/definitions/GetAvailableSenderSettingOptionsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/sender/settings:
    get:
      tags:
      - "Numbers"
      summary: "Get current user sender settings."
      operationId: "getSenderSettings"
      parameters:
      - name: "country"
        in: "query"
        description: "Return sender settings enabled for sending to specified country.\
          \ Two upper case characters"
        required: false
        type: "string"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Sender settings returned with success"
          schema:
            $ref: "#/definitions/GetSenderSettingsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    put:
      tags:
      - "Numbers"
      summary: "Change sender settings for specified country."
      operationId: "updateSenderSetting"
      produces: []
      parameters:
      - in: "body"
        name: "UpdateSenderSettingInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateSenderSettingInputObject"
        x-exportParamName: "UpdateSenderSettingInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          description: "Sender settings have been updated with success"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/numbers:
    get:
      tags:
      - "Numbers"
      summary: "Get user's dedicated numbers."
      operationId: "getUserDedicatedNumbers"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "surveyId"
        in: "query"
        description: "Fetch only that numbers which are ready for the survey"
        required: false
        type: "integer"
        x-exportParamName: "SurveyId"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Requested data returned with success"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/UsersInbound"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    post:
      tags:
      - "Numbers"
      summary: "Buy a dedicated number and assign it to the specified account."
      operationId: "buyDedicatedNumber"
      parameters:
      - in: "body"
        name: "BuyDedicatedNumberInputObject"
        required: true
        schema:
          $ref: "#/definitions/BuyDedicatedNumberInputObject"
        x-exportParamName: "BuyDedicatedNumberInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Number has been bought with success"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/numbers/available:
    get:
      tags:
      - "Numbers"
      summary: "Find available dedicated numbers to buy."
      operationId: "getAvailableDedicatedNumbers"
      parameters:
      - name: "prefix"
        in: "query"
        description: "Desired number prefix. Should include country code (i.e. 447\
          \ for GB). In case provide tollfree = 1 parameter and there are available\
          \ tollfree numbers, this parameter will be ignore."
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Prefix"
        x-optionalDataType: "Int32"
      - name: "tollfree"
        in: "query"
        description: "Should we show only tollfree numbers (tollfree available only\
          \ for US). Default is false."
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Tollfree"
        x-optionalDataType: "Int32"
      - name: "country"
        in: "query"
        description: "Dedicated number country. Two letters in upper case"
        required: true
        type: "string"
        x-example: "GB"
        x-exportParamName: "Country"
      responses:
        200:
          description: "The list of available to buy dedicated numbers"
          schema:
            $ref: "#/definitions/GetAvailableDedicatedNumbersResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/numbers/{id}:
    get:
      tags:
      - "Numbers"
      summary: "Get a single dedicated number."
      operationId: "getDedicatedNumber"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Requested dedicated number data returned with success"
          schema:
            $ref: "#/definitions/UsersInbound"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Numbers"
      summary: "Cancel dedicated number subscription."
      operationId: "deleteDedicatedNumber"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          description: "Dedicated number has been deleted with success"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/senderids:
    get:
      tags:
      - "Numbers"
      summary: "Get all sender IDs of current user."
      operationId: "getSenderIds"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Sender ids of current user returned with success"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/SenderId"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Numbers"
      summary: "Request for a new Sender ID."
      operationId: "requestSenderId"
      parameters:
      - in: "body"
        name: "RequestSenderIdInputObject"
        required: true
        schema:
          $ref: "#/definitions/RequestSenderIdInputObject"
        x-exportParamName: "RequestSenderIdInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Sender ID request has been created with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/senderids/{id}:
    get:
      tags:
      - "Numbers"
      summary: "Get a single Sender ID."
      operationId: "getSenderId"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Sender Id data returned with success"
          schema:
            $ref: "#/definitions/SenderId"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Numbers"
      summary: "Delete a Sender ID."
      operationId: "deleteSenderId"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/subaccounts:
    get:
      tags:
      - "User Subaccounts"
      summary: "Get all subaccounts of current user."
      operationId: "getSubaccounts"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Subaccounts data returned with success"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when current user is not allowed to manage subaccounts"
    post:
      tags:
      - "User Subaccounts"
      summary: "Invite new subaccount."
      operationId: "inviteSubaccount"
      produces: []
      parameters:
      - in: "body"
        name: "InviteSubaccountInputObject"
        required: true
        schema:
          $ref: "#/definitions/InviteSubaccountInputObject"
        x-exportParamName: "InviteSubaccountInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/subaccounts/tokens:
    post:
      tags:
      - "User Subaccounts"
      summary: "Request a new REST API token for subaccount."
      description: "Returning user object, key and app name."
      operationId: "requestNewSubaccountToken"
      parameters:
      - in: "body"
        name: "RequestNewSubaccountTokenInputObject"
        required: true
        schema:
          $ref: "#/definitions/RequestNewSubaccountTokenInputObject"
        x-exportParamName: "RequestNewSubaccountTokenInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Created Subaccount data returned with success"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when user has no enough rights to perform this action"
  /api/v2/subaccounts/tokens/list:
    post:
      tags:
      - "User Subaccounts"
      summary: "Get all subaccounts with their REST API tokens associated with specified\
        \ app name."
      description: "When more than one token related to app name, last key will be\
        \ returned."
      operationId: "getSubaccountsWithTokens"
      parameters:
      - in: "body"
        name: "GetSubaccountsWithTokensInputObject"
        required: true
        schema:
          $ref: "#/definitions/GetSubaccountsWithTokensInputObject"
        x-exportParamName: "GetSubaccountsWithTokensInputObject"
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "number"
        default: 1.0
        x-exportParamName: "Page"
        x-optionalDataType: "Float32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetSubaccountsWithTokensResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when user has no enough rights to perform this action"
  /api/v2/subaccounts/{id}:
    get:
      tags:
      - "User Subaccounts"
      summary: "Get a single subaccount."
      operationId: "getSubaccount"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Subaccount data returned with success"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when current user is not allowed to manage subaccounts"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "User Subaccounts"
      summary: "Close subaccount."
      operationId: "closeSubaccount"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when current user is not allowed to manage subaccounts"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/user/notification/balance/bundles:
    get:
      tags:
      - "User Settings"
      summary: "Returns the list of available balance options which can be used as\
        \ a bound to determine when to send email to user with low balance notification.\
        \ See https://my.textmagic.com/online/account/notifications/balance"
      operationId: "getBalanceNotificationOptions"
      parameters: []
      responses:
        200:
          description: "Returned when the list of available balance options have been\
            \ received with success"
          schema:
            $ref: "#/definitions/GetBalanceNotificationOptionsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/notification/balance:
    get:
      tags:
      - "User Settings"
      summary: "Get balance notification settings"
      operationId: "getBalanceNotificationSettings"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetBalanceNotificationSettingsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    put:
      tags:
      - "User Settings"
      summary: "Update balance notification settings"
      operationId: "updateBalanceNotificationSettings"
      produces: []
      parameters:
      - in: "body"
        name: "UpdateBalanceNotificationSettingsInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateBalanceNotificationSettingsInputObject"
        x-exportParamName: "UpdateBalanceNotificationSettingsInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/notification/inbound:
    get:
      tags:
      - "User Settings"
      summary: "Get inbound messages notification settings"
      operationId: "getInboundMessagesNotificationSettings"
      parameters: []
      responses:
        200:
          description: "Returned when success"
          schema:
            $ref: "#/definitions/GetInboundMessagesNotificationSettingsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    put:
      tags:
      - "User Settings"
      summary: "Update inbound messages notification settings"
      operationId: "updateInboundMessagesNotificationSettings"
      produces: []
      parameters:
      - in: "body"
        name: "UpdateInboundMessagesNotificationSettingsInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateInboundMessagesNotificationSettingsInputObject"
        x-exportParamName: "UpdateInboundMessagesNotificationSettingsInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/user/desktop/notification:
    put:
      tags:
      - "User Settings"
      summary: "Update chat desktop notification settings"
      operationId: "updateChatDesktopNotificationSettings"
      parameters:
      - in: "body"
        name: "UpdateChatDesktopNotificationSettingsInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateChatDesktopNotificationSettingsInputObject"
        x-exportParamName: "UpdateChatDesktopNotificationSettingsInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        200:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/callback/settings:
    get:
      tags:
      - "User Settings"
      summary: "Fetch callback URL settings"
      operationId: "getCallbackSettings"
      parameters: []
      responses:
        200:
          description: "Callback settings has been returned with success"
          schema:
            $ref: "#/definitions/GetCallbackSettingsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    put:
      tags:
      - "User Settings"
      summary: "Update callback URL settings"
      operationId: "updateCallbackSettings"
      parameters:
      - in: "body"
        name: "UpdateCallbackSettingsInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateCallbackSettingsInputObject"
        x-exportParamName: "UpdateCallbackSettingsInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        200:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/calls/price:
    get:
      tags:
      - "Calls"
      summary: "Check pricing for a inbound/outbound call."
      operationId: "getCallsPrices"
      parameters: []
      responses:
        200:
          description: "Pricing data has been returned with success"
          schema:
            type: "object"
            example:
              GF:
                outbound: "0.197"
                inbound: "0.016388"
                forward: "0.197"
              KN:
                outbound: "0.231"
                inbound: "0.016388"
                forward: "0.231"
              SX:
                outbound: "0.204"
                inbound: "0.016388"
                forward: "0.204"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/contacts/autocomplete:
    get:
      tags:
      - "Contacts"
      summary: "Get contacts autocomplete suggestions by given search term."
      operationId: "getContactsAutocomplete"
      parameters:
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find recipients by specified search query"
        required: true
        type: "string"
        x-example: "A"
        x-exportParamName: "Query"
      - name: "lists"
        in: "query"
        description: "Should lists be returned or not"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Lists"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Autocomplete data has been returned with success"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/GetContactsAutocompleteResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/contacts/favorite:
    get:
      tags:
      - "Contacts"
      summary: "Get favorite contacts and lists."
      operationId: "getFavourites"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find contacts or lists by specified search query"
        required: false
        type: "string"
        default: "A"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Favourites entities have been returned with success"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/FavoriteContact"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/contacts/search:
    get:
      tags:
      - "Contacts"
      summary: "Find user contacts by given parameters."
      operationId: "searchContacts"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "shared"
        in: "query"
        description: "Should shared contacts to be included"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Shared"
        x-optionalDataType: "Int32"
      - name: "ids"
        in: "query"
        description: "Find contact by ID(s)"
        required: false
        type: "string"
        pattern: "[,\\d]+"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "listId"
        in: "query"
        description: "Find contact by List ID"
        required: false
        type: "integer"
        x-exportParamName: "ListId"
        x-optionalDataType: "Int32"
      - name: "includeBlocked"
        in: "query"
        description: "Should blocked contacts to be included"
        required: false
        type: "integer"
        enum:
        - 0
        - 1
        x-exportParamName: "IncludeBlocked"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find contacts by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "local"
        in: "query"
        description: "Treat phone number passed in 'query' field as local. Default\
          \ is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Local"
        x-optionalDataType: "Int32"
      - name: "country"
        in: "query"
        description: "2-letter ISO country code for local phone numbers, used when\
          \ 'local' is set to true. Default is account country"
        required: false
        type: "string"
        x-exportParamName: "Country"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Found contacts have been returned with success"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Contact"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/contacts/phone/{phone}:
    get:
      tags:
      - "Contacts"
      summary: "Get a single contact by phone number."
      operationId: "getContactByPhone"
      parameters:
      - name: "phone"
        in: "path"
        required: true
        type: "string"
        default: "+23058300573"
        x-exportParamName: "Phone"
      responses:
        200:
          description: "Contact data has been returned with success"
          schema:
            $ref: "#/definitions/Contact"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts:
    get:
      tags:
      - "Contacts"
      summary: "Get all user contacts."
      operationId: "getContacts"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "shared"
        in: "query"
        description: "Should shared contacts to be included"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Shared"
        x-optionalDataType: "Int32"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Requested contacts have been returned with success"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Contact"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Contacts"
      summary: "Create a new contact from the submitted data."
      operationId: "createContact"
      parameters:
      - in: "body"
        name: "CreateContactInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreateContactInputObject"
        x-exportParamName: "CreateContactInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Contact has been created with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/contacts/{id}:
    get:
      tags:
      - "Contacts"
      summary: "Get a single contact."
      operationId: "getContact"
      parameters:
      - name: "id"
        in: "path"
        description: "The contact id"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Contact data received with success"
          schema:
            $ref: "#/definitions/Contact"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    put:
      tags:
      - "Contacts"
      summary: "Update existing contact."
      operationId: "updateContact"
      parameters:
      - in: "body"
        name: "UpdateContactInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateContactInputObject"
        x-exportParamName: "UpdateContactInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Contact has been created with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Contacts"
      summary: "Delete a single contact."
      operationId: "deleteContact"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to delete contact shared to you"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contact/all:
    delete:
      tags:
      - "Contacts"
      summary: "Delete all contacts."
      operationId: "deleteAllContacts"
      produces: []
      parameters: []
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
  /api/v2/contacts/delete:
    post:
      tags:
      - "Contacts"
      summary: "Delete contact by given ID(s) or delete all contacts."
      operationId: "deleteContactsByIds"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteContactsByIdsInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteContactsByIdsInputObject"
        x-exportParamName: "DeleteContactsByIdsInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/customfields:
    get:
      tags:
      - "Custom Fields"
      summary: "Get all contact custom fields."
      operationId: "getCustomFields"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Requested custom fields have been returned with success"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/UserCustomField"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Custom Fields"
      summary: "Create a new custom field from the submitted data."
      operationId: "createCustomField"
      parameters:
      - in: "body"
        name: "CreateCustomFieldInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreateCustomFieldInputObject"
        x-exportParamName: "CreateCustomFieldInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Contact has been created with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/customfields/{id}:
    get:
      tags:
      - "Custom Fields"
      summary: "Get a single custom field."
      operationId: "getCustomField"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/UserCustomField"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    put:
      tags:
      - "Custom Fields"
      summary: "Update existing custom field."
      operationId: "updateCustomField"
      parameters:
      - in: "body"
        name: "UpdateCustomFieldInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateCustomFieldInputObject"
        x-exportParamName: "UpdateCustomFieldInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when updated with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Custom Fields"
      summary: "Delete a single custom field."
      operationId: "deleteCustomField"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          description: "Returned when deleted with success"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/customfields/{id}/update:
    put:
      tags:
      - "Custom Fields"
      summary: "Update contact's custom field value."
      operationId: "updateCustomFieldValue"
      parameters:
      - in: "body"
        name: "UpdateCustomFieldValueInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateCustomFieldValueInputObject"
        x-exportParamName: "UpdateCustomFieldValueInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "string"
        default: "1"
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when updated with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/{id}/lists:
    get:
      tags:
      - "Contact Lists"
      summary: "Return lists which contact belongs to."
      operationId: "getListsOfContact"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Group"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/unsubscribers:
    get:
      tags:
      - "Contacts"
      summary: "Get all contact have unsubscribed from your communication."
      operationId: "getUnsubscribers"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/UnsubscribedContact"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Contacts"
      summary: "Unsubscribe contact from your communication by phone number."
      operationId: "unsubscribeContact"
      parameters:
      - in: "body"
        name: "UnsubscribeContactInputObject"
        required: true
        schema:
          $ref: "#/definitions/UnsubscribeContactInputObject"
        x-exportParamName: "UnsubscribeContactInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when updated with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/unsubscribers/{id}:
    get:
      tags:
      - "Contacts"
      summary: "Get a single unsubscribed contact."
      operationId: "getUnsubscribedContact"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/UnsubscribedContact"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/block:
    post:
      tags:
      - "Contacts"
      summary: "Block contact from inbound and outbound communication by phone number."
      operationId: "blockContact"
      parameters:
      - in: "body"
        name: "BlockContactInputObject"
        required: true
        schema:
          $ref: "#/definitions/BlockContactInputObject"
        x-exportParamName: "BlockContactInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when updated with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/unblock:
    post:
      tags:
      - "Contacts"
      summary: "Unblock contact by phone number."
      operationId: "unblockContact"
      produces: []
      parameters:
      - in: "body"
        name: "UnblockContactInputObject"
        required: true
        schema:
          $ref: "#/definitions/UnblockContactInputObject"
        x-exportParamName: "UnblockContactInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/unblock/bulk:
    post:
      tags:
      - "Contacts"
      summary: "Unblock several contacts by blocked contact ids or unblock all contacts"
      operationId: "unblockContactsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "UnblockContactsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/UnblockContactsBulkInputObject"
        x-exportParamName: "UnblockContactsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/block/phone:
    get:
      tags:
      - "Contacts"
      summary: "Check is that phone number blocked"
      operationId: "getContactIfBlocked"
      parameters:
      - name: "phone"
        in: "query"
        description: "Phone number to check"
        required: true
        type: "string"
        x-example: 9997339956475
        x-exportParamName: "Phone"
      responses:
        200:
          description: "Returned when contact is blocked"
          schema:
            $ref: "#/definitions/Contact"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "When contact is not blocked"
  /api/v2/contacts/{id}/notes:
    get:
      tags:
      - "Contact Notes"
      summary: "Fetch notes assigned to the given contact."
      operationId: "getContactNotes"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/ContactNote"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    post:
      tags:
      - "Contact Notes"
      summary: "Create a new contact note."
      operationId: "createContactNote"
      parameters:
      - in: "body"
        name: "CreateContactNoteInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreateContactNoteInputObject"
        x-exportParamName: "CreateContactNoteInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        default: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when created with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/notes/{id}:
    get:
      tags:
      - "Contact Notes"
      summary: "Get a single contact note."
      operationId: "getContactNote"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        default: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ContactNote"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    put:
      tags:
      - "Contact Notes"
      summary: "Update existing contact note."
      operationId: "updateContactNote"
      parameters:
      - in: "body"
        name: "UpdateContactNoteInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateContactNoteInputObject"
        x-exportParamName: "UpdateContactNoteInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit contact note shared to current\
            \ user"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Contact Notes"
      summary: "Delete a single contact note."
      operationId: "deleteContactNote"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/{id}/notes/delete:
    post:
      tags:
      - "Contact Notes"
      summary: "Delete contact note by given ID(s) or delete all contact notes."
      operationId: "deleteContactNotesBulk"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - in: "body"
        name: "DeleteContactNotesBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteContactNotesBulkInputObject"
        x-exportParamName: "DeleteContactNotesBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/{id}/avatar:
    post:
      tags:
      - "Contacts"
      summary: "Add an avatar for the contact."
      operationId: "uploadContactAvatar"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "image"
        in: "formData"
        description: "Contact avatar. Should be PNG or JPG file not more than 10 MB"
        required: true
        type: "file"
        x-exportParamName: "Image"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        default: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit contact shared to current user"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Contacts"
      summary: "Delete an avatar for the contact."
      operationId: "deleteContactAvatar"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        default: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit contact shared to current user"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/import/progress/{id}:
    get:
      tags:
      - "Contacts Import"
      summary: "Get contact import session progress."
      operationId: "getContactImportSessionProgress"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        default: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetContactImportSessionProgressResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/contacts/block/list:
    get:
      tags:
      - "Contacts"
      summary: "Get blocked contacts."
      operationId: "getBlockedContacts"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find blocked contacts by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Contact"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/email-lookups/{email}:
    get:
      tags:
      - "Tools"
      summary: "Validate Email address using Email Lookup tool"
      operationId: "doEmailLookup"
      parameters:
      - name: "email"
        in: "path"
        required: true
        type: "string"
        format: "email"
        x-example: "andrey.v@textmagic.biz"
        x-exportParamName: "Email"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/DoEmailLookupResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/lists/search:
    get:
      tags:
      - "Contact Lists"
      summary: "Find contact lists by given parameters."
      operationId: "searchLists"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "ids"
        in: "query"
        description: "Find lists by ID(s)"
        required: false
        type: "string"
        x-example: "1,2,3,4"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Find lists by specified search query"
        required: false
        type: "string"
        x-example: "A"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "onlyMine"
        in: "query"
        description: "Return only current user lists"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "OnlyMine"
        x-optionalDataType: "Int32"
      - name: "onlyDefault"
        in: "query"
        description: "Return only default lists"
        required: false
        type: "integer"
        default: 0
        x-exportParamName: "OnlyDefault"
        x-optionalDataType: "Int32"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Group"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/lists:
    get:
      tags:
      - "Contact Lists"
      summary: "Get all user lists."
      operationId: "getUserLists"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "favoriteOnly"
        in: "query"
        description: "Return only favorite lists"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "FavoriteOnly"
        x-optionalDataType: "Int32"
      - name: "onlyMine"
        in: "query"
        description: "Return only current user lists"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "OnlyMine"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Group"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    post:
      tags:
      - "Contact Lists"
      summary: "Create a new list from the submitted data."
      operationId: "createList"
      parameters:
      - in: "body"
        name: "CreateListInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreateListInputObject"
        x-exportParamName: "CreateListInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/lists/{id}/contacts:
    get:
      tags:
      - "Contact Lists"
      summary: "Fetch user contacts by given group id."
      description: "A useful synonym for \"contacts/search\" command with provided\
        \ \"listId\" parameter."
      operationId: "getContactsByListId"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "id"
        in: "path"
        description: "Given group Id."
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Contact"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    post:
      tags:
      - "Contact Lists"
      summary: "Reset list members to the specified contacts."
      operationId: "clearAndAssignContactsToList"
      parameters:
      - in: "body"
        name: "ClearAndAssignContactsToListInputObject"
        description: "Contact ID(s), separated by comma or 'all' to add all contacts\
          \ belonging to the current user"
        required: true
        schema:
          $ref: "#/definitions/ClearAndAssignContactsToListInputObject"
        x-exportParamName: "ClearAndAssignContactsToListInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit list shared to you"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    put:
      tags:
      - "Contact Lists"
      summary: "Assign contacts to the specified list."
      operationId: "assignContactsToList"
      parameters:
      - in: "body"
        name: "AssignContactsToListInputObject"
        description: "Contact ID(s), separated by comma or 'all' to add all contacts\
          \ belonging to the current user"
        required: true
        schema:
          $ref: "#/definitions/AssignContactsToListInputObject"
        x-exportParamName: "AssignContactsToListInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit list shared to you"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Contact Lists"
      summary: "Unassign contacts from the specified list."
      operationId: "deleteContactsFromList"
      produces: []
      parameters:
      - in: "body"
        name: "deleteContacsFromListObject"
        description: "Contact ID(s), separated by comma"
        required: true
        schema:
          $ref: "#/definitions/deleteContacsFromListObject"
        x-exportParamName: "DeleteContacsFromListObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit list shared to you"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/lists/{id}/contacts/ids:
    get:
      tags:
      - "Contact Lists"
      summary: "Fetch all contacts IDs belonging to the list with ID."
      operationId: "getListContactsIds"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetListContactsIdsResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/lists/{id}:
    get:
      tags:
      - "Contact Lists"
      summary: "Get a single list."
      operationId: "getList"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/Group"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    put:
      tags:
      - "Contact Lists"
      summary: "Update existing list."
      operationId: "updateList"
      parameters:
      - in: "body"
        name: "updateListObject"
        required: false
        schema:
          $ref: "#/definitions/updateListObject"
        x-exportParamName: "UpdateListObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Returned when the form has errors"
        403:
          description: "Returned when trying to edit list shared to you"
        404:
          description: "Returned when no list found"
    delete:
      tags:
      - "Contact Lists"
      summary: "Delete a single list."
      operationId: "deleteList"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Returned when trying to remove list associated with signup\
            \ form"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to remove list shared to you"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/lists/delete:
    post:
      tags:
      - "Contact Lists"
      summary: "Delete list by given ID(s) or delete all lists."
      operationId: "deleteListsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteListsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteListsBulkInputObject"
        x-exportParamName: "DeleteListsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/lists/{id}/contacts/delete:
    post:
      tags:
      - "Contact Lists"
      summary: "Delete contact from list by given ID(s) or all contacts from list."
      operationId: "deleteListContactsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteListContactsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteListContactsBulkInputObject"
        x-exportParamName: "DeleteListContactsBulkInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/lists/{id}/avatar:
    post:
      tags:
      - "Contact Lists"
      summary: "Add an avatar for the list."
      operationId: "uploadListAvatar"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "image"
        in: "formData"
        description: "List avatar. Should be PNG or JPG file not more than 10 MB"
        required: true
        type: "file"
        format: "binary"
        x-exportParamName: "Image"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Avatar uploaded with success"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit list shared to current user"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Contact Lists"
      summary: "Delete an avatar for the list."
      operationId: "deleteListAvatar"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          description: "Avatar has been deleted with success"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when trying to edit list shared to current user"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/templates/search:
    get:
      tags:
      - "Templates"
      summary: "Find user templates by given parameters."
      operationId: "searchTemplates"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "ids"
        in: "query"
        description: "Find template by ID(s)"
        required: false
        type: "string"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "name"
        in: "query"
        description: "Find template by name"
        required: false
        type: "string"
        x-exportParamName: "Name"
        x-optionalDataType: "String"
      - name: "content"
        in: "query"
        description: "Find template by content"
        required: false
        type: "string"
        x-exportParamName: "Content"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageTemplate"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/templates:
    get:
      tags:
      - "Templates"
      summary: "Get all user templates."
      operationId: "getAllTemplates"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        x-example: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        x-example: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageTemplate"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Templates"
      summary: "Create a new template from the submitted data."
      operationId: "createTemplate"
      parameters:
      - in: "body"
        name: "CreateTemplateInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreateTemplateInputObject"
        x-exportParamName: "CreateTemplateInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Returned when the form has errors"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/templates/{id}:
    get:
      tags:
      - "Templates"
      summary: "Get a single template."
      operationId: "getTemplate"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/MessageTemplate"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    put:
      tags:
      - "Templates"
      summary: "Update existing template."
      operationId: "updateTemplate"
      parameters:
      - in: "body"
        name: "UpdateTemplateInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateTemplateInputObject"
        x-exportParamName: "UpdateTemplateInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Returned when the form has errors"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Templates"
      summary: "Delete a single template."
      operationId: "deleteTemplate"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/templates/delete:
    post:
      tags:
      - "Templates"
      summary: "Delete template by given ID(s) or delete all templates."
      operationId: "deleteTemplatesBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteTemplatesBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteTemplatesBulkInputObject"
        x-exportParamName: "DeleteTemplatesBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/messages:
    get:
      tags:
      - "Outbound Messages"
      summary: "Get all messages"
      description: "Get all user oubound messages."
      operationId: "getAllOutboundMessages"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "lastId"
        in: "query"
        description: "Filter results by ID, selecting all values lesser than the specified\
          \ ID. Note that \\'page\\' parameter is ignored when \\'lastId\\' is specified"
        required: false
        type: "integer"
        x-exportParamName: "LastId"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageOut"
            additionalProperties: {}
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Outbound Messages"
      summary: "Send message"
      description: "The main entrypoint to send messages. See examples above for the\
        \ reference."
      operationId: "sendMessage"
      parameters:
      - in: "body"
        name: "SendMessageInputObject"
        required: true
        schema:
          $ref: "#/definitions/SendMessageInputObject"
        x-exportParamName: "SendMessageInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/SendMessageResponse"
        202:
          description: "Returned when bulk session has been created"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/messages/{id}:
    get:
      tags:
      - "Outbound Messages"
      summary: "Get a single message"
      description: "Get a single outgoing message."
      operationId: "getOutboundMessage"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/MessageOut"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Outbound Messages"
      summary: "Delete message"
      description: "Delete a single message."
      operationId: "deleteOutboundMessage"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/messages/delete:
    post:
      tags:
      - "Outbound Messages"
      summary: "Delete messages by IDs"
      description: "Delete outbound messages by given ID(s) or delete all outbound\
        \ messages."
      operationId: "deleteOutboundMessagesBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteOutboundMessagesBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteOutboundMessagesBulkInputObject"
        x-exportParamName: "DeleteOutboundMessagesBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/message/all:
    delete:
      tags:
      - "Outbound Messages"
      summary: "Delete all messages"
      description: "Delete all messages."
      operationId: "deleteAllOutboundMessages"
      produces: []
      parameters: []
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/messages/price:
    get:
      tags:
      - "Outbound Messages"
      summary: "Check price"
      description: "Check pricing for a new outbound message."
      operationId: "getMessagePrice"
      parameters:
      - name: "includeBlocked"
        in: "query"
        description: "Should we show pricing for the blocked contacts."
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "IncludeBlocked"
        x-optionalDataType: "Int32"
      - name: "text"
        in: "query"
        description: "Message text. Required if template_id is not set"
        required: false
        type: "string"
        x-example: "Test message test"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "templateId"
        in: "query"
        description: "Template used instead of message text. Required if text is not\
          \ set"
        required: false
        type: "integer"
        x-example: 1
        x-exportParamName: "TemplateId"
        x-optionalDataType: "Int32"
      - name: "sendingTime"
        in: "query"
        description: "DEPRECATED, consider using sendingDateTime and sendingTimezone\
          \ parameters instead: Optional (required with rrule set). Message sending\
          \ time in unix timestamp format. Default is now"
        required: false
        type: "integer"
        x-example: 1565606455
        x-exportParamName: "SendingTime"
        x-optionalDataType: "Int32"
      - name: "sendingDateTime"
        in: "query"
        description: "Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33).\
          \ This time is relative to sendingTimezone"
        required: false
        type: "string"
        x-example: "2020-05-27 13:02:33"
        x-exportParamName: "SendingDateTime"
        x-optionalDataType: "String"
      - name: "sendingTimezone"
        in: "query"
        description: "ID or ISO-name of timezone used for sending when sendingDateTime\
          \ parameter is set. E.g. if you specify sendingDateTime = \\\"2016-05-27\
          \ 13:02:33\\\" and sendingTimezone = \\\"America/Buenos_Aires\\\", your\
          \ message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33\
          \ UTC. Default is account timezone"
        required: false
        type: "string"
        x-example: "America/Buenos_Aires"
        x-exportParamName: "SendingTimezone"
        x-optionalDataType: "String"
      - name: "contacts"
        in: "query"
        description: "Comma separated array of contact resources id message will be\
          \ sent to"
        required: false
        type: "string"
        x-example: "1,2,3,4"
        x-exportParamName: "Contacts"
        x-optionalDataType: "String"
      - name: "lists"
        in: "query"
        description: "Comma separated array of list resources id message will be sent\
          \ to"
        required: false
        type: "string"
        x-example: "1,2,3,4"
        x-exportParamName: "Lists"
        x-optionalDataType: "String"
      - name: "phones"
        in: "query"
        description: "Comma separated array of E.164 phone numbers message will be\
          \ sent to"
        required: false
        type: "string"
        x-example: "+19993322111,+19993322110"
        x-exportParamName: "Phones"
        x-optionalDataType: "String"
      - name: "cutExtra"
        in: "query"
        description: "Should sending method cut extra characters which not fit supplied\
          \ partsCount or return 400 Bad request response instead. Default is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "CutExtra"
        x-optionalDataType: "Int32"
      - name: "partsCount"
        in: "query"
        description: "Maximum message parts count (TextMagic allows sending 1 to 6\
          \ message parts). Default is 6"
        required: false
        type: "integer"
        default: 6
        x-exportParamName: "PartsCount"
        x-optionalDataType: "Int32"
      - name: "referenceId"
        in: "query"
        description: "Custom message reference id which can be used in your application\
          \ infrastructure"
        required: false
        type: "integer"
        x-example: 1
        x-exportParamName: "ReferenceId"
        x-optionalDataType: "Int32"
      - name: "from"
        in: "query"
        description: "One of allowed Sender ID (phone number or alphanumeric sender\
          \ ID). If specified Sender ID is not allowed for some destinations, a fallback\
          \ default Sender ID will be used to ensure delivery"
        required: false
        type: "string"
        x-example: "Testid1"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "rule"
        in: "query"
        description: "iCal RRULE parameter to create recurrent scheduled messages.\
          \ When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator\
          \ for format details"
        required: false
        type: "string"
        x-example: "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1"
        x-exportParamName: "Rule"
        x-optionalDataType: "String"
      - name: "createChat"
        in: "query"
        description: "Should sending method try to create new Chat(if not exist) with\
          \ specified recipients. Default is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "CreateChat"
        x-optionalDataType: "Int32"
      - name: "tts"
        in: "query"
        description: "Send Text to Speech message. Default is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Tts"
        x-optionalDataType: "Int32"
      - name: "local"
        in: "query"
        description: "Treat phone numbers passed in \\'phones\\' field as local. Default\
          \ is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Local"
        x-optionalDataType: "Int32"
      - name: "localCountry"
        in: "query"
        description: "2-letter ISO country code for local phone numbers, used when\
          \ \\'local\\' is set to true. Default is account country"
        required: false
        type: "string"
        x-example: "US"
        x-exportParamName: "LocalCountry"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetMessagePriceResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/messages/preview:
    get:
      tags:
      - "Outbound Messages"
      summary: "Preview message"
      description: "Get messages preview (with tags merged) up to 100 messages per\
        \ session."
      operationId: "getMessagePreview"
      parameters:
      - name: "text"
        in: "query"
        description: "Message text. Required if template_id is not set"
        required: false
        type: "string"
        x-example: "Test message test"
        x-exportParamName: "Text"
        x-optionalDataType: "String"
      - name: "templateId"
        in: "query"
        description: "Template used instead of message text. Required if text is not\
          \ set"
        required: false
        type: "integer"
        x-example: 1
        x-exportParamName: "TemplateId"
        x-optionalDataType: "Int32"
      - name: "sendingTime"
        in: "query"
        description: "DEPRECATED, consider using sendingDateTime and sendingTimezone\
          \ parameters instead: Optional (required with rrule set). Message sending\
          \ time in unix timestamp format. Default is now"
        required: false
        type: "integer"
        x-example: 1565606455
        x-exportParamName: "SendingTime"
        x-optionalDataType: "Int32"
      - name: "sendingDateTime"
        in: "query"
        description: "Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33).\
          \ This time is relative to sendingTimezone"
        required: false
        type: "string"
        x-example: "2020-05-27 13:02:33"
        x-exportParamName: "SendingDateTime"
        x-optionalDataType: "String"
      - name: "sendingTimezone"
        in: "query"
        description: "ID or ISO-name of timezone used for sending when sendingDateTime\
          \ parameter is set. E.g. if you specify sendingDateTime = \\\"2016-05-27\
          \ 13:02:33\\\" and sendingTimezone = \\\"America/Buenos_Aires\\\", your\
          \ message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33\
          \ UTC. Default is account timezone"
        required: false
        type: "string"
        x-example: "America/Buenos_Aires"
        x-exportParamName: "SendingTimezone"
        x-optionalDataType: "String"
      - name: "contacts"
        in: "query"
        description: "Comma separated array of contact resources id message will be\
          \ sent to"
        required: false
        type: "string"
        x-example: "1,2,3,4"
        x-exportParamName: "Contacts"
        x-optionalDataType: "String"
      - name: "lists"
        in: "query"
        description: "Comma separated array of list resources id message will be sent\
          \ to"
        required: false
        type: "string"
        x-example: "1,2,3,4"
        x-exportParamName: "Lists"
        x-optionalDataType: "String"
      - name: "phones"
        in: "query"
        description: "Comma separated array of E.164 phone numbers message will be\
          \ sent to"
        required: false
        type: "string"
        x-example: "+19993322111,+19993322110"
        x-exportParamName: "Phones"
        x-optionalDataType: "String"
      - name: "cutExtra"
        in: "query"
        description: "Should sending method cut extra characters which not fit supplied\
          \ partsCount or return 400 Bad request response instead. Default is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "CutExtra"
        x-optionalDataType: "Int32"
      - name: "partsCount"
        in: "query"
        description: "Maximum message parts count (TextMagic allows sending 1 to 6\
          \ message parts). Default is 6"
        required: false
        type: "integer"
        default: 6
        x-exportParamName: "PartsCount"
        x-optionalDataType: "Int32"
      - name: "referenceId"
        in: "query"
        description: "Custom message reference id which can be used in your application\
          \ infrastructure"
        required: false
        type: "integer"
        x-example: 1
        x-exportParamName: "ReferenceId"
        x-optionalDataType: "Int32"
      - name: "from"
        in: "query"
        description: "One of allowed Sender ID (phone number or alphanumeric sender\
          \ ID). If specified Sender ID is not allowed for some destinations, a fallback\
          \ default Sender ID will be used to ensure delivery"
        required: false
        type: "string"
        x-example: "Testid1"
        x-exportParamName: "From"
        x-optionalDataType: "String"
      - name: "rule"
        in: "query"
        description: "iCal RRULE parameter to create recurrent scheduled messages.\
          \ When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator\
          \ for format details"
        required: false
        type: "string"
        x-example: "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1"
        x-exportParamName: "Rule"
        x-optionalDataType: "String"
      - name: "createChat"
        in: "query"
        description: "Should sending method try to create new Chat(if not exist) with\
          \ specified recipients. Default is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "CreateChat"
        x-optionalDataType: "Int32"
      - name: "tts"
        in: "query"
        description: "Send Text to Speech message. Default is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Tts"
        x-optionalDataType: "Int32"
      - name: "local"
        in: "query"
        description: "Treat phone numbers passed in \\'phones\\' field as local. Default\
          \ is 0"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Local"
        x-optionalDataType: "Int32"
      - name: "localCountry"
        in: "query"
        description: "2-letter ISO country code for local phone numbers, used when\
          \ \\'local\\' is set to true. Default is account country"
        required: false
        type: "string"
        x-example: "US"
        x-exportParamName: "LocalCountry"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetMessagePreviewResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/messages/search:
    get:
      tags:
      - "Outbound Messages"
      summary: "Find messages"
      description: "Find outbound messages by given parameters."
      operationId: "searchOutboundMessages"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "lastId"
        in: "query"
        description: "Filter results by ID, selecting all values lesser than the specified\
          \ ID. Note that \\'page\\' parameter is ignored when \\'lastId\\' is specified"
        required: false
        type: "integer"
        x-exportParamName: "LastId"
        x-optionalDataType: "Int32"
      - name: "ids"
        in: "query"
        description: "Find message by ID(s)"
        required: false
        type: "string"
        pattern: "[,\\d]+"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "sessionId"
        in: "query"
        description: "Find messages by session ID"
        required: false
        type: "integer"
        x-exportParamName: "SessionId"
        x-optionalDataType: "Int32"
      - name: "statuses"
        in: "query"
        description: "Find messages by status"
        required: false
        type: "string"
        enum:
        - "q"
        - "s"
        - "e"
        - "r"
        - "a"
        - "d"
        - "b"
        - "f"
        - "u"
        - "j"
        - "i"
        - "p"
        - "h"
        x-example: "q"
        x-exportParamName: "Statuses"
        x-optionalDataType: "String"
      - name: "includeDeleted"
        in: "query"
        description: "Search also in deleted messages"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "IncludeDeleted"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find messages by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageOut"
            additionalProperties: {}
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/messages/attachment:
    post:
      tags:
      - "Outbound Messages"
      summary: "Upload message attachment"
      description: "Upload a new file to insert it as a link."
      operationId: "uploadMessageAttachment"
      consumes:
      - "multipart/form-data"
      parameters:
      - name: "file"
        in: "formData"
        description: "Attachment. Supports .jpg, .gif, .png, .pdf, .txt, .csv, .doc,\
          \ .docx, .xls, .xlsx, .ppt, .pptx & .vcf file formats"
        required: true
        type: "file"
        x-exportParamName: "File"
      responses:
        201:
          description: "File uploaded with success"
          schema:
            $ref: "#/definitions/UploadMessageAttachmentResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/schedules/search:
    get:
      tags:
      - "Scheduled Messages"
      summary: "Find scheduled messages by given parameters."
      operationId: "searchScheduledMessages"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find messages by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "ids"
        in: "query"
        description: "Find schedules by ID(s)"
        required: false
        type: "string"
        pattern: "[,\\d]+"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "status"
        in: "query"
        description: "Fetch schedules with the specific status: a - actual, c - completed,\
          \ x - all"
        required: false
        type: "string"
        default: "x"
        enum:
        - "x"
        - "a"
        - "c"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "nextSend"
        - "lastSend"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessagesIcs"
            additionalProperties: {}
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/replies/search:
    get:
      tags:
      - "Inbound Messages"
      summary: "Find inbound messages by given parameters."
      operationId: "searchInboundMessages"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "ids"
        in: "query"
        description: "Find message by ID(s)"
        required: false
        type: "string"
        pattern: "[,\\d]+"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      - name: "query"
        in: "query"
        description: "Find recipients by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "sender"
        - "receiver"
        - "messageTime"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "expand"
        in: "query"
        description: "Expand by adding firstName, lastName and contactId"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Expand"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageIn"
            additionalProperties: {}
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/messages/prices:
    get:
      tags:
      - "Outbound Messages"
      summary: "Get pricing"
      description: "Get message prices for all countries."
      operationId: "getMessagePrices"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetMessagePricesResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/history:
    get:
      tags:
      - "Outbound Messages"
      summary: "Get history"
      description: "Get outbound messages history."
      operationId: "getOutboundMessagesHistory"
      parameters:
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "lastId"
        in: "query"
        description: "Filter results by ID, selecting all values lesser than the specified\
          \ ID."
        required: false
        type: "integer"
        x-exportParamName: "LastId"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find message by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "phone"
        - "sender"
        - "firstName"
        - "lastName"
        - "messageTime"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "lastId"
            - "limit"
            - "nextLastId"
            - "resources"
            properties:
              lastId:
                type: "integer"
                example: 1
                x-nullable: true
              nextLastId:
                type: "integer"
                example: 1
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageOut"
            additionalProperties: {}
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/sessions/{id}:
    get:
      tags:
      - "Outbound Message Sessions"
      summary: "Get a message session."
      operationId: "getMessageSession"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/MessageSession"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Outbound Message Sessions"
      summary: "Delete a message session, together with all nested messages."
      operationId: "deleteMessageSession"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/sessions:
    get:
      tags:
      - "Outbound Message Sessions"
      summary: "Get all message sending sessions."
      operationId: "getAllMessageSessions"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageSession"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/bulks/{id}:
    get:
      tags:
      - "Bulk Message Sessions"
      summary: "Get bulk message session status."
      operationId: "getBulkSession"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/BulkSession"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/bulks:
    get:
      tags:
      - "Bulk Message Sessions"
      summary: "Get all bulk sending sessions."
      operationId: "getAllBulkSessions"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/BulkSession"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/sessions/{id}/messages:
    get:
      tags:
      - "Outbound Message Sessions"
      summary: "Fetch messages by given session id."
      description: "A useful synonym for \"messages/search\" command with provided\
        \ \"sessionId\" parameter."
      operationId: "getMessagesBySessionId"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "statuses"
        in: "query"
        description: "Find messages by status"
        required: false
        type: "string"
        enum:
        - "q"
        - "s"
        - "e"
        - "r"
        - "a"
        - "d"
        - "b"
        - "f"
        - "u"
        - "j"
        - "i"
        - "p"
        - "h"
        x-exportParamName: "Statuses"
        x-optionalDataType: "String"
      - name: "includeDeleted"
        in: "query"
        description: "Search also in deleted messages"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "IncludeDeleted"
        x-optionalDataType: "Int32"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageOut"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/sessions/{id}/stat:
    get:
      tags:
      - "Outbound Message Sessions"
      summary: "Get sending session statistics."
      operationId: "getMessageSessionStat"
      parameters:
      - name: "includeDeleted"
        in: "query"
        description: "Search also in deleted messages"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "IncludeDeleted"
        x-optionalDataType: "Int32"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetMessageSessionStatResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/sessions/delete:
    post:
      tags:
      - "Outbound Message Sessions"
      summary: "Delete messages sessions, together with all nested messages, by given\
        \ ID(s) or delete all messages sessions."
      operationId: "deleteMessageSessionsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteMessageSessionsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteMessageSessionsBulkInputObject"
        x-exportParamName: "DeleteMessageSessionsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/schedules:
    get:
      tags:
      - "Scheduled Messages"
      summary: "Get all scheduled messages."
      operationId: "getAllScheduledMessages"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "status"
        in: "query"
        description: "Fetch schedules with the specific status: a - actual, c - completed,\
          \ x - all"
        required: false
        type: "string"
        default: "x"
        enum:
        - "a"
        - "c"
        - "x"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "nextSend"
        - "lastSend"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessagesIcs"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/schedules/{id}:
    get:
      tags:
      - "Scheduled Messages"
      summary: "Get message schedule."
      operationId: "getScheduledMessage"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/MessagesIcs"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Scheduled Messages"
      summary: "Delete a message session, together with all nested messages."
      operationId: "deleteScheduledMessage"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/schedules/delete:
    post:
      tags:
      - "Scheduled Messages"
      summary: "Delete scheduled messages by given ID(s) or delete all scheduled messages."
      operationId: "deleteScheduledMessagesBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteScheduledMessagesBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteScheduledMessagesBulkInputObject"
        x-exportParamName: "DeleteScheduledMessagesBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/replies:
    get:
      tags:
      - "Inbound Messages"
      summary: "Get all inbox messages."
      operationId: "getAllInboundMessages"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "sender"
        - "receiver"
        - "messageTime"
        - "firstName"
        - "lastName"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/MessageIn"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/replies/{id}:
    get:
      tags:
      - "Inbound Messages"
      summary: "Get a single inbox message."
      operationId: "getInboundMessage"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/MessageIn"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Inbound Messages"
      summary: "Delete the incoming message."
      operationId: "deleteInboundMessage"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/replies/delete:
    post:
      tags:
      - "Inbound Messages"
      summary: "Delete inbound messages by given ID(s) or delete all inbound messages."
      operationId: "deleteInboundMessagesBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteInboundMessagesBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteInboundMessagesBulkInputObject"
        x-exportParamName: "DeleteInboundMessagesBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/stats/messaging:
    get:
      tags:
      - "Statistic"
      summary: "Return messaging statistics."
      operationId: "getMessagingStat"
      parameters:
      - name: "by"
        in: "query"
        description: "Group results by specified period: off, day, month or year.\
          \ Default is off"
        required: false
        type: "string"
        default: "off"
        enum:
        - "off"
        - "day"
        - "month"
        - "year"
        x-exportParamName: "By"
        x-optionalDataType: "String"
      - name: "start"
        in: "query"
        description: "Start date in unix timestamp format. Default is 7 days ago"
        required: false
        type: "integer"
        x-exportParamName: "Start"
        x-optionalDataType: "Int32"
      - name: "end"
        in: "query"
        description: "End date in unix timestamp format. Default is now"
        required: false
        type: "string"
        x-exportParamName: "End"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetMessagingStatResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/stats/spending:
    get:
      tags:
      - "Billing"
      summary: "Return account spending statistics."
      operationId: "getSpendingStat"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "start"
        in: "query"
        description: "Optional. Start date in unix timestamp format. Default is 7\
          \ days ago"
        required: false
        type: "integer"
        x-exportParamName: "Start"
        x-optionalDataType: "Int32"
      - name: "end"
        in: "query"
        description: "Optional. End date in unix timestamp format. Default is now"
        required: false
        type: "integer"
        allowEmptyValue: false
        x-exportParamName: "End"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/UserStatement"
            additionalProperties: {}
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/invoices:
    get:
      tags:
      - "Billing"
      summary: "Return account invoices."
      operationId: "getInvoices"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Invoice"
            additionalProperties: {}
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        403:
          description: "Returned when current user is not allowed to manage invoices"
  /api/v2/stats/messaging/data:
    get:
      tags:
      - "Statistic"
      summary: "Return counters for messaging data views."
      operationId: "getMessagingCounters"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetMessagingCountersResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/search:
    get:
      tags:
      - "Chats"
      summary: "Find chats by inbound or outbound messages text."
      operationId: "searchChats"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find chats by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Chat"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/search/ids:
    get:
      tags:
      - "Chats"
      summary: "Find chats by IDs."
      operationId: "searchChatsByIds"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "ids"
        in: "query"
        description: "Find chats by ID(s)"
        required: false
        type: "string"
        pattern: "[,\\d]+"
        x-exportParamName: "Ids"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Chat"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/search/recipients:
    get:
      tags:
      - "Chats"
      summary: "Find chats by recipient (contact, list name or phone number)."
      operationId: "searchChatsByReceipent"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find chats by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "unread"
        - "messageTime"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Chat"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats:
    get:
      tags:
      - "Chats"
      summary: "Get all user chats."
      operationId: "getAllChats"
      parameters:
      - name: "status"
        in: "query"
        description: "Fetch only (a)ctive, (c)losed or (d)eleted chats"
        required: false
        type: "string"
        enum:
        - "a"
        - "c"
        - "d"
        x-exportParamName: "Status"
        x-optionalDataType: "String"
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "orderBy"
        in: "query"
        description: "Order results by some field. Default is id"
        required: false
        type: "string"
        default: "id"
        enum:
        - "id"
        - "unread"
        - "messageTime"
        x-exportParamName: "OrderBy"
        x-optionalDataType: "String"
      - name: "voice"
        in: "query"
        description: "Fetch results with voice calls"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Voice"
        x-optionalDataType: "Int32"
      - name: "flat"
        in: "query"
        description: "Should additional contact info be included"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-example: 1
        x-exportParamName: "Flat"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Chat"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/{id}/message:
    get:
      tags:
      - "Chats"
      summary: "Fetch messages from chat with specified chat id."
      operationId: "getChatMessages"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      - name: "query"
        in: "query"
        description: "Find messages by specified search query"
        required: false
        type: "string"
        x-exportParamName: "Query"
        x-optionalDataType: "String"
      - name: "start"
        in: "query"
        description: "Return messages since specified timestamp only"
        required: false
        type: "integer"
        x-exportParamName: "Start"
        x-optionalDataType: "Int32"
      - name: "end"
        in: "query"
        description: "Return messages up to specified timestamp only"
        required: false
        type: "integer"
        x-exportParamName: "End"
        x-optionalDataType: "Int32"
      - name: "direction"
        in: "query"
        description: "Order direction. Default is desc"
        required: false
        type: "string"
        default: "desc"
        enum:
        - "asc"
        - "desc"
        x-exportParamName: "Direction"
        x-optionalDataType: "String"
      - name: "voice"
        in: "query"
        description: "Fetch results with voice calls"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Voice"
        x-optionalDataType: "Int32"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Conversation"
            additionalProperties: {}
        400:
          description: "Returned when invalid phone number specified"
  /api/v2/chats/mute:
    post:
      tags:
      - "Chats"
      summary: "Set mute mode."
      operationId: "muteChat"
      parameters:
      - in: "body"
        name: "MuteChatInputObject"
        required: true
        schema:
          $ref: "#/definitions/MuteChatInputObject"
        x-exportParamName: "MuteChatInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/chats/mute/bulk:
    post:
      tags:
      - "Chats"
      summary: "Mute several chats by chat ids or mute all chats"
      operationId: "muteChatsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "MuteChatsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/MuteChatsBulkInputObject"
        x-exportParamName: "MuteChatsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/unmute/bulk:
    post:
      tags:
      - "Chats"
      summary: "Unmute several chats by chat ids or unmute all chats"
      operationId: "unmuteChatsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "UnmuteChatsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/UnmuteChatsBulkInputObject"
        x-exportParamName: "UnmuteChatsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/unread/bulk:
    post:
      tags:
      - "Chats"
      summary: "Mark several chats as UNread by chat ids or mark all chats as UNread"
      operationId: "markChatsUnreadBulk"
      produces: []
      parameters:
      - in: "body"
        name: "MarkChatsUnreadBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/MarkChatsUnreadBulkInputObject"
        x-exportParamName: "MarkChatsUnreadBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/read/bulk:
    post:
      tags:
      - "Chats"
      summary: "Mark several chats as read by chat ids or mark all chats as read"
      operationId: "markChatsReadBulk"
      produces: []
      parameters:
      - in: "body"
        name: "MarkChatsReadBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/MarkChatsReadBulkInputObject"
        x-exportParamName: "MarkChatsReadBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/close/bulk:
    post:
      tags:
      - "Chats"
      summary: "Close chats by chat ids or close all chats"
      operationId: "closeChatsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "CloseChatsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/CloseChatsBulkInputObject"
        x-exportParamName: "CloseChatsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/close/read:
    post:
      tags:
      - "Chats"
      summary: "Close all chats that have no unread messages."
      operationId: "closeReadChats"
      produces: []
      parameters: []
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/reopen/bulk:
    post:
      tags:
      - "Chats"
      summary: "Reopen chats by chat ids or reopen all chats"
      operationId: "reopenChatsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "ReopenChatsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/ReopenChatsBulkInputObject"
        x-exportParamName: "ReopenChatsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/status:
    post:
      tags:
      - "Chats"
      summary: "Set status of the chat given by ID."
      operationId: "setChatStatus"
      parameters:
      - in: "body"
        name: "SetChatStatusInputObject"
        required: true
        schema:
          $ref: "#/definitions/SetChatStatusInputObject"
        x-exportParamName: "SetChatStatusInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/delete:
    post:
      tags:
      - "Chats"
      summary: "Delete chats by given ID(s) or delete all chats."
      operationId: "deleteChatsBulk"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteChatsBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteChatsBulkInputObject"
        x-exportParamName: "DeleteChatsBulkInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/{id}/messages/delete:
    post:
      tags:
      - "Chats"
      summary: "Delete messages from chat by given messages ID(s)."
      operationId: "deleteChatMessages"
      produces: []
      parameters:
      - in: "body"
        name: "DeleteChatMessagesBulkInputObject"
        required: true
        schema:
          $ref: "#/definitions/DeleteChatMessagesBulkInputObject"
        x-exportParamName: "DeleteChatMessagesBulkInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/{phone}/by/phone:
    get:
      tags:
      - "Chats"
      summary: "Find chats by phone."
      operationId: "getChatByPhone"
      parameters:
      - name: "upsert"
        in: "query"
        description: "Create a new chat if not found"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Upsert"
        x-optionalDataType: "Int32"
      - name: "reopen"
        in: "query"
        description: "Reopen chat if found or do not change status"
        required: false
        type: "integer"
        default: 0
        enum:
        - 0
        - 1
        x-exportParamName: "Reopen"
        x-optionalDataType: "Int32"
      - name: "phone"
        in: "path"
        required: true
        type: "string"
        default: "19998887766"
        x-exportParamName: "Phone"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/Chat"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/chats/unread/count:
    get:
      tags:
      - "Chats"
      summary: "Get total amount of unread messages in the current user chats."
      operationId: "getUnreadMessagesTotal"
      parameters: []
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetUnreadMessagesTotalResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/chats/{id}:
    get:
      tags:
      - "Chats"
      summary: "Get a single chat."
      operationId: "getChat"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/Chat"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/surveys/{id}/start:
    put:
      tags:
      - "Surveys"
      summary: "Start a survey."
      operationId: "startSurvey"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        422:
          description: "Returned when survey is in unprocessable status (only DRAFT\
            \ surveys are accepted) or has no recipients"
  /api/v2/surveys/{id}/duplicate:
    put:
      tags:
      - "Surveys"
      summary: "Duplicate a survey."
      operationId: "duplicateSurvey"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        422:
          description: "Returned when survey is in unprocessable status"
  /api/v2/surveys/{id}/cancel:
    put:
      tags:
      - "Surveys"
      summary: "Cancel a survey."
      operationId: "cancelSurvey"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        422:
          description: "Returned when survey is in unprocessable status (only ACTIVE\
            \ surveys are accepted)"
  /api/v2/surveys/{id}/reset:
    put:
      tags:
      - "Surveys"
      summary: "Reset a survey flow."
      operationId: "resetSurvey"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        422:
          description: "Returned when survey is in unprocessable status"
  /api/v2/surveys:
    get:
      tags:
      - "Surveys"
      summary: "Get all user surveys."
      operationId: "getSurveys"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/Survey"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
    post:
      tags:
      - "Surveys"
      summary: "Create a new survey from the submitted data."
      operationId: "createSurvey"
      parameters:
      - in: "body"
        name: "CreateSurveyInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreateSurveyInputObject"
        x-exportParamName: "CreateSurveyInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/surveys/{id}:
    get:
      tags:
      - "Surveys"
      summary: "Get a survey by id."
      operationId: "getSurvey"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/Survey"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    put:
      tags:
      - "Surveys"
      summary: "Update existing survey."
      operationId: "updateSurvey"
      parameters:
      - in: "body"
        name: "UpdateSurveyInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateSurveyInputObject"
        x-exportParamName: "UpdateSurveyInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Surveys"
      summary: "Delete a survey."
      operationId: "deleteSurvey"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
  /api/v2/surveys/{id}/nodes:
    get:
      tags:
      - "Surveys"
      summary: "Fetch nodes by given survey id."
      operationId: "getSurveyNodes"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/GetSurveyNodesResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    post:
      tags:
      - "Surveys"
      summary: "Create a new node from the submitted data."
      operationId: "createSurveyNode"
      parameters:
      - in: "body"
        name: "CreateSurveyNodeInputObject"
        required: true
        schema:
          $ref: "#/definitions/CreateSurveyNodeInputObject"
        x-exportParamName: "CreateSurveyNodeInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
  /api/v2/surveys/nodes/{id}:
    get:
      tags:
      - "Surveys"
      summary: "Get a node by id."
      operationId: "getSurveyNode"
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        200:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/SurveyNode"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    put:
      tags:
      - "Surveys"
      summary: "Update existing node."
      operationId: "updateSurveyNode"
      parameters:
      - in: "body"
        name: "UpdateSurveyNodeInputObject"
        required: true
        schema:
          $ref: "#/definitions/UpdateSurveyNodeInputObject"
        x-exportParamName: "UpdateSurveyNodeInputObject"
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        201:
          description: "Returned when successful"
          schema:
            $ref: "#/definitions/ResourceLinkResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
    delete:
      tags:
      - "Surveys"
      summary: "Delete a node."
      operationId: "deleteSurveyNode"
      produces: []
      parameters:
      - name: "id"
        in: "path"
        required: true
        type: "integer"
        x-example: 1
        x-exportParamName: "Id"
      responses:
        204:
          description: "Returned when successful"
        404:
          description: "Returned when no survey found"
  /api/v2/surveys/nodes/merge:
    post:
      tags:
      - "Surveys"
      summary: "Merge two question nodes."
      operationId: "mergeSurveyNodes"
      produces: []
      parameters:
      - in: "body"
        name: "MergeSurveyNodesInputObject"
        required: true
        schema:
          $ref: "#/definitions/MergeSurveyNodesInputObject"
        x-exportParamName: "MergeSurveyNodesInputObject"
      - name: "X-Ignore-Null-Values"
        in: "header"
        required: false
        type: "boolean"
        default: true
        x-exportParamName: "XIgnoreNullValues"
        x-optionalDataType: "Bool"
      responses:
        204:
          $ref: "#/definitions/SuccessfulResponse"
        400:
          description: "Bad request"
          schema:
            $ref: "#/definitions/BadRequestResponse"
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
        404:
          description: "Request data not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
      deprecated: true
  /api/v2/calls:
    get:
      tags:
      - "Calls"
      summary: "Get all forwarded calls."
      operationId: "getForwardedCalls"
      parameters:
      - name: "page"
        in: "query"
        description: "Fetch specified results page"
        required: false
        type: "integer"
        default: 1
        x-exportParamName: "Page"
        x-optionalDataType: "Int32"
      - name: "limit"
        in: "query"
        description: "How many results to return"
        required: false
        type: "integer"
        default: 10
        x-exportParamName: "Limit"
        x-optionalDataType: "Int32"
      responses:
        200:
          description: "Returned when successful"
          schema:
            type: "object"
            required:
            - "limit"
            - "page"
            - "pageCount"
            - "resources"
            properties:
              page:
                type: "integer"
                example: 1
              pageCount:
                type: "integer"
                example: 10
              limit:
                type: "integer"
                example: 10
              resources:
                type: "array"
                items:
                  $ref: "#/definitions/ForwardedCall"
            additionalProperties: {}
        401:
          description: "Unauthorized request"
          schema:
            $ref: "#/definitions/UnauthorizedResponse"
securityDefinitions:
  BasicAuth:
    type: "basic"
definitions:
  ResourceLinkResponse:
    required:
    - "href"
    - "id"
    properties:
      id:
        type: "integer"
        example: 1
      href:
        type: "string"
        example: "/api/v2/entity_name/1"
    example:
      id: 1
      href: "/api/v2/entity_name/1"
  SuccessfulResponse:
    description: "Request executed with success"
  NotFoundResponse:
    properties:
      code:
        type: "integer"
        format: "int32"
        example: 404
      message:
        type: "string"
        example: "Resource does not exist"
  UnauthorizedResponse:
    properties:
      code:
        type: "integer"
        format: "int32"
        example: 401
      message:
        type: "string"
        example: "Wrong username and token combination"
  BadRequestResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
        example: 400
      message:
        type: "string"
        example: "Error messages goes here"
      errors:
        $ref: "#/definitions/BadRequestResponse_errors"
    description: "Returned when the form has errors"
  PingResponse:
    type: "object"
    required:
    - "ping"
    - "utcDateTime"
    properties:
      ping:
        type: "string"
        example: "pong"
        description: "Pong."
      utcDateTime:
        type: "string"
        example: "2019-01-01T00:00:00.000+0000"
        description: "Current date time"
    example:
      ping: "pong"
      utcDateTime: "2019-01-01T00:00:00.000+0000"
  GetContactImportSessionProgressResponse:
    required:
    - "processed"
    - "status"
    properties:
      status:
        type: "integer"
      processed:
        type: "integer"
        example: 67
        description: "How many contacts have been imported"
    example:
      processed: 67
      status: 0
  GetAvailableSenderSettingOptionsResponse:
    type: "object"
    required:
    - "dedicated"
    - "senderIds"
    - "shared"
    - "user"
    properties:
      dedicated:
        type: "array"
        example:
        - 123456780
        - 987654321
        items:
          type: "string"
      user:
        type: "array"
        example:
        - 123456780
        - 987654321
        items:
          type: "string"
      shared:
        type: "array"
        example:
        - 123456780
        - 987654321
        items:
          type: "string"
      senderIds:
        type: "array"
        example:
        - 123456780
        - 987654321
        items:
          type: "string"
    example:
      dedicated:
      - 123456780
      - 987654321
      shared:
      - 123456780
      - 987654321
      senderIds:
      - 123456780
      - 987654321
      user:
      - 123456780
      - 987654321
  GetVersionsResponse:
    type: "object"
    required:
    - "android"
    - "desktop"
    - "ios"
    properties:
      ios:
        type: "integer"
        example: 1
      android:
        type: "integer"
        example: 2
      desktop:
        type: "integer"
        example: 3
    example:
      desktop: 3
      android: 2
      ios: 1
  DoAuthResponse:
    required:
    - "disallowedRules"
    - "expires"
    - "minVersions"
    - "token"
    - "username"
    properties:
      username:
        type: "string"
        example: "test"
      token:
        type: "string"
        example: "fPTUUKQ4Dvaq9l9ZQQgsLO1HfSR0K4"
      expires:
        type: "string"
        format: "date-time"
        x-nullable: true
      minVersions:
        $ref: "#/definitions/DoAuthResponse_minVersions"
      disallowedRules:
        type: "array"
        example:
        - "SEND_MESSAGES"
        - "MAKE_CALLS"
        - "EMAIL_LOOKUP"
        items:
          type: "string"
    example:
      disallowedRules:
      - "SEND_MESSAGES"
      - "MAKE_CALLS"
      - "EMAIL_LOOKUP"
      expires: "2000-01-23T04:56:07.000+00:00"
      minVersions:
        desktop: 0
        android: 0
        ios: 0
      username: "test"
      token: "fPTUUKQ4Dvaq9l9ZQQgsLO1HfSR0K4"
  GetCallbackSettingsResponse:
    required:
    - "format"
    - "inUrl"
    - "outUrl"
    properties:
      outUrl:
        type: "string"
        example: "http://www.mysite.com/delivery-callback.php"
        description: "This URL is used to push message delivery status updates to\
          \ your application."
        x-nullable: true
      inUrl:
        type: "string"
        example: "http://www.mysite.com/incoming-sms-callback.php"
        description: "This URL is used to push incoming SMS to your application."
        x-nullable: true
      format:
        type: "string"
        description: "Desired callback data format. m - multipart/form-data, u - application/x-www-form-urlencoded,\
          \ j - application/json"
        enum:
        - "m"
        - "u"
        - "j"
    example:
      inUrl: "http://www.mysite.com/incoming-sms-callback.php"
      outUrl: "http://www.mysite.com/delivery-callback.php"
      format: "m"
  GetInboundMessagesNotificationSettingsResponse:
    required:
    - "alertEmail1"
    - "alertEmail2"
    - "alertEmail3"
    - "forwardedCallNotification"
    - "inboundMessageNotification"
    - "includeSmsHistory"
    - "sendInHtmlFormat"
    properties:
      inboundMessageNotification:
        type: "boolean"
        example: true
        description: "Should user receive notification about new incoming messages"
      forwardedCallNotification:
        type: "boolean"
        example: true
        description: "Should user receive notification about new forwarded calls"
      includeSmsHistory:
        type: "boolean"
        example: true
        description: "Include SMS history into notification Email"
      sendInHtmlFormat:
        type: "boolean"
        example: true
        description: "Send Email notification in HTML format"
      alertEmail1:
        type: "string"
        example: "test@test.com"
        description: "New message notification email 2"
      alertEmail2:
        type: "string"
        example: "test@test.com"
        description: "New message notification email 2"
      alertEmail3:
        type: "string"
        example: "test@test.com"
        description: "New message notification email 3"
    example:
      sendInHtmlFormat: true
      alertEmail1: "test@test.com"
      forwardedCallNotification: true
      alertEmail2: "test@test.com"
      includeSmsHistory: true
      alertEmail3: "test@test.com"
      inboundMessageNotification: true
  DoCarrierLookupResponse:
    type: "object"
    required:
    - "carrier"
    - "cost"
    - "local"
    - "number164"
    - "type"
    - "valid"
    properties:
      cost:
        type: "number"
        example: 0.04
      country:
        $ref: "#/definitions/Country"
      local:
        type: "string"
        example: "(541) 754-3010"
      type:
        type: "string"
        example: "mobile"
      carrier:
        type: "string"
        example: "Example Messaging Systems"
      number164:
        type: "string"
        example: "+15417543010"
      valid:
        type: "boolean"
        example: true
    example:
      valid: true
      country:
        name: "India"
        id: "US"
      number164: "+15417543010"
      carrier: "Example Messaging Systems"
      cost: 0.04
      type: "mobile"
      local: "(541) 754-3010"
  UpdateCurrentUserInputObject:
    properties:
      username:
        type: "string"
        example: "Test"
      firstName:
        type: "string"
        example: "Test"
      lastName:
        type: "string"
        example: "Test"
      email:
        type: "string"
        example: "test@test.com"
      phone:
        type: "string"
        example: "79030011222"
      company:
        type: "string"
        example: "Dummy company"
      timezone:
        type: "integer"
        example: 2
        description: "timezone id"
    example:
      firstName: "Test"
      lastName: "Test"
      phone: "79030011222"
      timezone: 2
      company: "Dummy company"
      email: "test@test.com"
      username: "Test"
  UpdateCurrentUserResponse:
    properties:
      username:
        type: "string"
        example: "Test"
      firstName:
        type: "string"
        example: "Test"
      lastName:
        type: "string"
        example: "Test"
      email:
        type: "string"
        example: "test@test.com"
      phone:
        type: "string"
        example: "79030011222"
      company:
        type: "string"
        example: "Dummy company"
      timezone:
        type: "integer"
        example: 2
        description: "timezone id"
    example:
      firstName: "Test"
      lastName: "Test"
      phone: "79030011222"
      timezone: 2
      company: "Dummy company"
      email: "test@test.com"
      username: "Test"
  GetContactsAutocompleteResponse:
    required:
    - "avatar"
    - "countryName"
    - "entityId"
    - "entityType"
    - "favorited"
    - "label"
    - "qposition"
    - "rposition"
    - "sharedBy"
    - "userId"
    - "value"
    properties:
      entityId:
        type: "integer"
        example: 1
        description: "Id of entity. 0 if object is a Reply"
      entityType:
        type: "string"
        example: "contact"
        description: ""
        enum:
        - "list"
        - "contact"
        - "reply"
      value:
        type: "string"
        example: "22"
        description: "Id of contact/list if entityType is contact/list OR phone number\
          \ if entityType is reply"
      label:
        type: "string"
        example: "Homer Simpson"
        description: "Name of the contact/list if entityType is contact/list OR phone\
          \ number if entityType is reply"
      sharedBy:
        type: "string"
        example: "John Doe"
        description: "If contact or list was shared by another user then name if this\
          \ user will be shown"
      avatar:
        type: "string"
        example: "avatars/dummy_avatar.png"
        x-nullable: true
      favorited:
        type: "boolean"
        example: true
        description: "If contact was marked as favourited"
      userId:
        type: "integer"
        example: 33
        description: "Owner id of the contact/list (if it was shared)"
      countryName:
        type: "string"
        example: "Australia"
      qposition:
        type: "integer"
        example: "Internal field, used for sorting purposes"
      rposition:
        type: "integer"
        example: "Internal field, used for sorting purposes"
    example:
      entityType: "contact"
      sharedBy: "John Doe"
      rposition: "Internal field, used for sorting purposes"
      entityId: 1
      label: "Homer Simpson"
      avatar: "avatars/dummy_avatar.png"
      countryName: "Australia"
      value: "22"
      userId: 33
      qposition: "Internal field, used for sorting purposes"
      favorited: true
  DoEmailLookupResponse:
    type: "object"
    required:
    - "address"
    - "addressType"
    - "deliverability"
    - "domainPart"
    - "emailRole"
    - "exchange"
    - "hasAa"
    - "hasAaaa"
    - "hasMx"
    - "isDisposableAddress"
    - "isInBlackList"
    - "isInWhiteList"
    - "localPart"
    - "preference"
    - "reason"
    - "risk"
    - "status"
    - "suggestion"
    properties:
      address:
        type: "string"
        format: "email"
        example: "manager@company.com"
      addressType:
        type: "string"
        example: "corporate"
      emailRole:
        type: "string"
        example: "manager"
        x-nullable: true
      reason:
        type: "string"
        example: "Requested Mailbox does not exist"
        x-nullable: true
      status:
        type: "string"
        enum:
        - "valid"
        - "invalid"
      deliverability:
        type: "string"
        example: "undeliverable"
      isDisposableAddress:
        type: "boolean"
        example: false
      localPart:
        type: "string"
        example: "manager"
      domainPart:
        type: "string"
        example: "test.com"
      exchange:
        type: "string"
        example: "mx01.xworks.net"
      isInWhiteList:
        type: "boolean"
        example: false
      isInBlackList:
        type: "boolean"
        example: false
      hasMx:
        type: "boolean"
        example: true
      hasAa:
        type: "boolean"
        example: true
      hasAaaa:
        type: "boolean"
        example: true
      risk:
        type: "string"
        example: "high"
      preference:
        type: "integer"
        example: 10
      suggestion:
        type: "string"
        example: "account-manager@company.com"
        x-nullable: true
    example:
      deliverability: "undeliverable"
      reason: "Requested Mailbox does not exist"
      hasMx: true
      address: "manager@company.com"
      addressType: "corporate"
      isInBlackList: false
      preference: 10
      suggestion: "account-manager@company.com"
      domainPart: "test.com"
      emailRole: "manager"
      isDisposableAddress: false
      localPart: "manager"
      isInWhiteList: false
      exchange: "mx01.xworks.net"
      risk: "high"
      hasAaaa: true
      hasAa: true
      status: "valid"
  GetMessagingStatResponse:
    type: "array"
    items:
      $ref: "#/definitions/MessagingStatItem"
  GetSenderSettingsResponse:
    type: "object"
    required:
    - "other"
    - "special"
    - "user"
    properties:
      user:
        type: "object"
        example:
          GB: "447520633183"
        properties: {}
      special:
        type: "object"
        example:
          FR: "Test sender id"
        properties: {}
      other:
        type: "object"
        example:
          AF: "447624800500"
          AL: "447624800500"
          AU: "61428102137"
          AT: "447624800500"
          BE: "447624800500"
          CL: "447624800500"
          CR: "447624800500"
          HR: "447624800500"
          CZ: "447624800500"
          DK: "4592450490"
          EE: "447624800500"
          FI: "3584573950033"
          DE: "491771781422"
          HK: "447624800500"
          HU: "447624800500"
          ID: "447624800500"
          IE: "447624800500"
          IL: "447624800500"
        properties: {}
    example:
      special:
        FR: "Test sender id"
      other:
        AF: "447624800500"
        AL: "447624800500"
        AU: "61428102137"
        AT: "447624800500"
        BE: "447624800500"
        CL: "447624800500"
        CR: "447624800500"
        HR: "447624800500"
        CZ: "447624800500"
        DK: "4592450490"
        EE: "447624800500"
        FI: "3584573950033"
        DE: "491771781422"
        HK: "447624800500"
        HU: "447624800500"
        ID: "447624800500"
        IE: "447624800500"
        IL: "447624800500"
      user:
        GB: "447520633183"
  GetAvailableDedicatedNumbersResponse:
    type: "object"
    required:
    - "numbers"
    - "price"
    properties:
      numbers:
        type: "array"
        example:
        - 18887777773
        - 18887777775
        items:
          type: "string"
      price:
        type: "number"
        format: "float"
        example: 2.4
    example:
      price: 2.4
      numbers:
      - 18887777773
      - 18887777775
  GetSubaccountsWithTokensResponse:
    type: "array"
    items:
      $ref: "#/definitions/SubaccountWithToken"
  GetPushTokensResponse:
    type: "array"
    items:
      $ref: "#/definitions/PushToken"
  GetSurveyNodesResponse:
    required:
    - "nodes"
    - "rows"
    properties:
      nodes:
        type: "array"
        items:
          $ref: "#/definitions/SurveyNode"
      rows:
        type: "array"
        items:
          type: "array"
          items:
            type: "integer"
            example: 1
    example:
      nodes:
      - isEndNode: false
        endNodes:
        - "1"
        - "1"
        startNodes:
        - "1"
        - "1"
        id: 1
        label: "Question 1"
        body: "Hello {First name}! Would you like to participate in a short survey?\
          \ To continue, just reply Yes."
        nodeType: "q"
        sendDelay: 0
      - isEndNode: false
        endNodes:
        - "1"
        - "1"
        startNodes:
        - "1"
        - "1"
        id: 1
        label: "Question 1"
        body: "Hello {First name}! Would you like to participate in a short survey?\
          \ To continue, just reply Yes."
        nodeType: "q"
        sendDelay: 0
      rows:
      - - 1
        - 1
      - - 1
        - 1
  GetBalanceNotificationOptionsResponse:
    required:
    - "1"
    - "10"
    - "100"
    - "1000"
    - "2"
    - "20"
    - "3"
    - "30"
    - "5"
    - "50"
    - "500"
    properties:
      1:
        type: "string"
        example: "£1.00"
        description: "Contains sign of currency in Unicode hex code"
      2:
        type: "string"
        example: "£2.00"
        description: "Contains sign of currency in Unicode hex code"
      3:
        type: "string"
        example: "£3.00"
        description: "Contains sign of currency in Unicode hex code"
      5:
        type: "string"
        example: "£5.00"
        description: "Contains sign of currency in Unicode hex code"
      10:
        type: "string"
        example: "£10.00"
        description: "Contains sign of currency in Unicode hex code"
      20:
        type: "string"
        example: "£20.00"
        description: "Contains sign of currency in Unicode hex code"
      30:
        type: "string"
        example: "£30.00"
        description: "Contains sign of currency in Unicode hex code"
      50:
        type: "string"
        example: "£50.00"
        description: "Contains sign of currency in Unicode hex code"
      100:
        type: "string"
        example: "£100.00"
        description: "Contains sign of currency in Unicode hex code"
      500:
        type: "string"
        example: "£500.00"
        description: "Contains sign of currency in Unicode hex code"
      1000:
        type: "string"
        example: "£1,000.00"
        description: "Contains sign of currency in Unicode hex code"
    example:
      1: "£1.00"
      100: "£100.00"
      2: "£2.00"
      3: "£3.00"
      5: "£5.00"
      500: "£500.00"
      1000: "£1,000.00"
      50: "£50.00"
      30: "£30.00"
      20: "£20.00"
      10: "£10.00"
  GetBalanceNotificationSettingsResponse:
    required:
    - "alertBalance"
    - "alertEmail1"
    - "alertEmail2"
    - "alertEmail3"
    - "alertPhone"
    - "lowBalanceNotification"
    properties:
      lowBalanceNotification:
        type: "boolean"
        example: true
        description: "Should user receive low balance notification"
      alertBalance:
        type: "string"
        example: "50"
        description: "If balance is below this value, user receive low balance notification"
      alertPhone:
        type: "string"
        example: "15417543010"
        description: "Low balance notification phone number"
      alertEmail1:
        type: "string"
        example: "test@test.com"
        description: "Low balance notification email 1"
      alertEmail2:
        type: "string"
        example: "test@test.com"
        description: "Low balance notification email 2"
      alertEmail3:
        type: "string"
        example: "test@test.com"
        description: "Low balance notification email 3"
    example:
      alertBalance: "50"
      alertPhone: "15417543010"
      alertEmail1: "test@test.com"
      alertEmail2: "test@test.com"
      alertEmail3: "test@test.com"
      lowBalanceNotification: true
  GetListContactsIdsResponse:
    type: "array"
    items:
      type: "integer"
      example: 1
  GetMessagePriceResponse:
    required:
    - "countries"
    - "parts"
    - "total"
    properties:
      total:
        type: "number"
        example: 0.08
      parts:
        type: "integer"
        example: 2
      countries:
        type: "object"
        example:
          GB:
            country: "GB"
            country_name: "United Kingdom"
            allow_dedicated: true
            count: 2
            max: 0.04
            sum: 0.08
            landline: 0
        properties: {}
    example:
      total: 0.08
      parts: 2
      countries:
        GB:
          country: "GB"
          country_name: "United Kingdom"
          allow_dedicated: true
          count: 2
          max: 0.04
          sum: 0.08
          landline: 0
  GetMessagePreviewResponse:
    properties:
      messages:
        type: "array"
        items:
          $ref: "#/definitions/MessageOut"
    example:
      messages:
      - messageTime: "2019-08-12T11:43:37+0000"
        charset: "ISO-8859-1"
        lastName: "Test last name"
        country: "US"
        partsCount: 1
        creditsPrice: "creditsPrice"
        source: "1"
        fromEmail: "test@email.com"
        price: 0.025
        smscId: "1"
        contact: "contact"
        id: 1
        text: "Test message"
        receiver: "19993322110"
        contactId: 1
        sessionId: 1
        avatar: "avatars/dummy_avatar.png"
        userId: 1
        fromNumber: "447624800500"
        firstName: "Test first name"
        deleted: false
        numbersCount: 6
        sender: "447624800500"
        phone: "447624800500"
        deliveredCount: 0
        charsetLabel: "ISO-8859-1"
        chars: 5
        status: "q"
      - messageTime: "2019-08-12T11:43:37+0000"
        charset: "ISO-8859-1"
        lastName: "Test last name"
        country: "US"
        partsCount: 1
        creditsPrice: "creditsPrice"
        source: "1"
        fromEmail: "test@email.com"
        price: 0.025
        smscId: "1"
        contact: "contact"
        id: 1
        text: "Test message"
        receiver: "19993322110"
        contactId: 1
        sessionId: 1
        avatar: "avatars/dummy_avatar.png"
        userId: 1
        fromNumber: "447624800500"
        firstName: "Test first name"
        deleted: false
        numbersCount: 6
        sender: "447624800500"
        phone: "447624800500"
        deliveredCount: 0
        charsetLabel: "ISO-8859-1"
        chars: 5
        status: "q"
  SendMessageResponse:
    required:
    - "bulkId"
    - "chatId"
    - "href"
    - "id"
    - "messageId"
    - "scheduleId"
    - "sessionId"
    - "type"
    properties:
      id:
        type: "integer"
        example: 10489
      href:
        type: "string"
        example: "/api/v2/sessions/10489"
      type:
        type: "string"
        example: "session"
      sessionId:
        type: "integer"
        example: 10489
        x-nullable: true
      bulkId:
        type: "integer"
        x-nullable: true
      messageId:
        type: "integer"
        x-nullable: true
      scheduleId:
        type: "integer"
        x-nullable: true
      chatId:
        type: "integer"
        x-nullable: true
    example:
      bulkId: 0
      chatId: 5
      messageId: 6
      id: 10489
      href: "/api/v2/sessions/10489"
      sessionId: 10489
      type: "session"
      scheduleId: 1
  GetMessageSessionStatResponse:
    required:
    - "accepted"
    - "all"
    - "delivered"
    - "failed"
    - "rejected"
    - "scheduled"
    - "sent"
    properties:
      failed:
        type: "integer"
        example: 1
      delivered:
        type: "integer"
        example: 1
      accepted:
        type: "integer"
        example: 1
      rejected:
        type: "integer"
        example: 1
      scheduled:
        type: "integer"
        example: 1
      all:
        type: "integer"
        example: 1
      sent:
        type: "integer"
        example: 1
    example:
      all: 1
      rejected: 1
      scheduled: 1
      accepted: 1
      delivered: 1
      failed: 1
      sent: 1
  GetMessagingCountersResponse:
    required:
    - "contacts"
    - "received"
    - "sent"
    properties:
      contacts:
        type: "integer"
        example: 10
      sent:
        type: "integer"
        example: 10
      received:
        type: "integer"
        example: 10
    example:
      received: 10
      sent: 10
      contacts: 10
  GetUnreadMessagesTotalResponse:
    required:
    - "total"
    properties:
      total:
        type: "integer"
        example: 1
    example:
      total: 1
  UploadMessageAttachmentResponse:
    required:
    - "chars"
    - "href"
    - "name"
    - "size"
    properties:
      chars:
        type: "integer"
        example: 10
      href:
        type: "string"
        example: "click/So4LP"
      name:
        type: "string"
        example: "test.pdf"
      size:
        type: "integer"
        example: 32640
    example:
      size: 32640
      name: "test.pdf"
      href: "click/So4LP"
      chars: 10
  GetMessagePricesResponse:
    example:
      VU:
        name: "Vanuatu"
        price: "0.065"
      VE:
        name: "Venezuela"
        price: "0.035"
      VN:
        name: "Vietnam"
        price: "0.045"
      VG:
        name: "Virgin Islands"
        price: "0.04"
      VI:
        name: "Virgin Islands US"
        price: "0.04"
      YE:
        name: "Yemen"
        price: "0.03"
      ZM:
        name: "Zambia"
        price: "0.04"
      ZW:
        name: "Zimbabwe"
        price: "0.04"
  GetStateResponse:
    required:
    - "callFinished"
    - "chatCacheClear"
    - "chatClosed"
    - "chatCreated"
    - "chatDeleted"
    - "chatMarkedAsRead"
    - "chatMuted"
    - "chatReopened"
    - "chatUnmuted"
    - "contactAdded"
    - "contactCacheClear"
    - "contactDeleted"
    - "contactImportEnd"
    - "contactStateChanged"
    - "contactWipeEnd"
    - "customFieldsCacheClear"
    - "listAdded"
    - "listCacheClear"
    - "listDeleted"
    - "listStateChanged"
    - "messageBulkEnd"
    - "messageCacheClear"
    - "messageDeleted"
    - "messageIncoming"
    - "messageIncomingCacheClear"
    - "messageIncomingDeleted"
    - "messageScheduleAdded"
    - "messageScheduleCacheClear"
    - "messageScheduleDeleted"
    - "messageScheduleStateChanged"
    - "messageSent"
    - "messageSessionDeleted"
    - "messageStateChanged"
    - "messageTemplateCacheClear"
    - "messageWipeEnd"
    - "systemAccountStateChanged"
    - "systemAlert"
    - "systemCacheClear"
    - "systemExit"
    properties:
      systemCacheClear:
        type: "integer"
        example: 1
      systemExit:
        type: "integer"
        example: 1
      systemAlert:
        type: "integer"
        example: 1
      systemAccountStateChanged:
        type: "integer"
        example: 1
      messageDeleted:
        type: "integer"
        example: 1
      messageIncoming:
        type: "integer"
        example: 1
      messageIncomingDeleted:
        type: "integer"
        example: 1
      messageStateChanged:
        type: "integer"
        example: 1
      messageBulkEnd:
        type: "integer"
        example: 1
      messageWipeEnd:
        type: "integer"
        example: 1
      messageSent:
        type: "integer"
        example: 1
      messageSessionDeleted:
        type: "integer"
        example: 1
      messageCacheClear:
        type: "integer"
        example: 1
      messageIncomingCacheClear:
        type: "integer"
        example: 1
      messageScheduleAdded:
        type: "integer"
        example: 1
      messageScheduleStateChanged:
        type: "integer"
        example: 1
      messageScheduleDeleted:
        type: "integer"
        example: 1
      messageScheduleCacheClear:
        type: "integer"
        example: 1
      messageTemplateCacheClear:
        type: "integer"
        example: 1
      callFinished:
        type: "integer"
        example: 1
      chatCreated:
        type: "integer"
        example: 1
      chatMarkedAsRead:
        type: "integer"
        example: 1
      chatMuted:
        type: "integer"
        example: 1
      chatUnmuted:
        type: "integer"
        example: 1
      chatDeleted:
        type: "integer"
        example: 1
      chatClosed:
        type: "integer"
        example: 1
      chatReopened:
        type: "integer"
        example: 1
      chatCacheClear:
        type: "integer"
        example: 1
      contactAdded:
        type: "integer"
        example: 1
      contactDeleted:
        type: "integer"
        example: 1
      contactStateChanged:
        type: "integer"
        example: 1
      listAdded:
        type: "integer"
        example: 1
      listDeleted:
        type: "integer"
        example: 1
      listStateChanged:
        type: "integer"
        example: 1
      contactWipeEnd:
        type: "integer"
        example: 1
      contactImportEnd:
        type: "integer"
        example: 1
      contactCacheClear:
        type: "integer"
        example: 1
      listCacheClear:
        type: "integer"
        example: 1
      customFieldsCacheClear:
        type: "integer"
        example: 1
    example:
      chatDeleted: 1
      contactCacheClear: 1
      systemCacheClear: 1
      systemAccountStateChanged: 1
      messageSent: 1
      chatCacheClear: 1
      contactStateChanged: 1
      messageScheduleDeleted: 1
      messageDeleted: 1
      listStateChanged: 1
      messageTemplateCacheClear: 1
      listCacheClear: 1
      callFinished: 1
      listDeleted: 1
      contactDeleted: 1
      listAdded: 1
      messageScheduleAdded: 1
      messageScheduleCacheClear: 1
      messageStateChanged: 1
      chatMuted: 1
      messageIncoming: 1
      messageBulkEnd: 1
      chatUnmuted: 1
      messageIncomingCacheClear: 1
      systemExit: 1
      messageIncomingDeleted: 1
      chatMarkedAsRead: 1
      messageWipeEnd: 1
      messageScheduleStateChanged: 1
      customFieldsCacheClear: 1
      messageSessionDeleted: 1
      chatCreated: 1
      contactImportEnd: 1
      contactWipeEnd: 1
      chatClosed: 1
      systemAlert: 1
      messageCacheClear: 1
      contactAdded: 1
      chatReopened: 1
  User:
    type: "object"
    required:
    - "avatar"
    - "balance"
    - "company"
    - "country"
    - "currency"
    - "email"
    - "emailAccepted"
    - "firstName"
    - "id"
    - "lastName"
    - "phone"
    - "phoneAccepted"
    - "status"
    - "subaccountType"
    - "timezone"
    - "username"
    properties:
      id:
        type: "integer"
        example: 1
      username:
        type: "string"
        example: "Test"
      firstName:
        type: "string"
        example: "Test"
      lastName:
        type: "string"
        example: "Test"
      email:
        type: "string"
        example: "test@test.com"
      status:
        type: "string"
        example: "A"
      balance:
        type: "number"
        example: 100.0
      phone:
        type: "string"
        example: "79030011222"
        x-nullable: true
      company:
        type: "string"
        example: "Dummy company"
        x-nullable: true
      currency:
        $ref: "#/definitions/Currency"
      country:
        $ref: "#/definitions/Country"
      timezone:
        $ref: "#/definitions/Timezone"
      subaccountType:
        type: "string"
        example: "P"
      emailAccepted:
        type: "boolean"
        example: true
      phoneAccepted:
        type: "boolean"
        example: true
      avatar:
        $ref: "#/definitions/UserImage"
    example:
      emailAccepted: true
      lastName: "Test"
      country:
        name: "India"
        id: "US"
      subaccountType: "P"
      timezone:
        area: "Europe"
        dst: 1
        offset: 10800
        timezone: "Europe\\/Tallinn"
        id: 55
      phoneAccepted: true
      avatar:
        href: "https://dummylogos.com/logo.png"
      firstName: "Test"
      balance: 100.0
      phone: "79030011222"
      company: "Dummy company"
      currency:
        htmlSymbol: "&pound;"
        unicodeSymbol: "£"
        id: "GBP"
      id: 1
      email: "test@test.com"
      username: "Test"
      status: "A"
  UsersInbound:
    type: "object"
    required:
    - "country"
    - "expireAt"
    - "id"
    - "purchasedAt"
    - "status"
    - "user"
    properties:
      id:
        type: "integer"
        example: 1
      user:
        $ref: "#/definitions/User"
      purchasedAt:
        type: "string"
        format: "date-time"
      expireAt:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        example: "U"
        description: "A - active, in use (at least one message was sent/received from/to\
          \ this number), U - never used before"
        enum:
        - "U"
        - "A"
      country:
        $ref: "#/definitions/Country"
      phone:
        type: "string"
        example: "79030011222"
    example:
      country:
        name: "India"
        id: "US"
      phone: "79030011222"
      purchasedAt: "2000-01-23T04:56:07.000+00:00"
      id: 1
      expireAt: "2000-01-23T04:56:07.000+00:00"
      user:
        emailAccepted: true
        lastName: "Test"
        country:
          name: "India"
          id: "US"
        subaccountType: "P"
        timezone:
          area: "Europe"
          dst: 1
          offset: 10800
          timezone: "Europe\\/Tallinn"
          id: 55
        phoneAccepted: true
        avatar:
          href: "https://dummylogos.com/logo.png"
        firstName: "Test"
        balance: 100.0
        phone: "79030011222"
        company: "Dummy company"
        currency:
          htmlSymbol: "&pound;"
          unicodeSymbol: "£"
          id: "GBP"
        id: 1
        email: "test@test.com"
        username: "Test"
        status: "A"
      status: "U"
  SenderId:
    type: "object"
    required:
    - "id"
    - "senderId"
    - "status"
    - "user"
    properties:
      id:
        type: "integer"
        example: 332
      senderId:
        type: "string"
        example: "Dummy sender id"
      user:
        $ref: "#/definitions/User"
      status:
        type: "string"
        example: "A"
        description: "A - accepted, R - rejected, P - pending"
        enum:
        - "A"
        - "R"
        - "P"
    example:
      senderId: "Dummy sender id"
      id: 332
      user:
        emailAccepted: true
        lastName: "Test"
        country:
          name: "India"
          id: "US"
        subaccountType: "P"
        timezone:
          area: "Europe"
          dst: 1
          offset: 10800
          timezone: "Europe\\/Tallinn"
          id: 55
        phoneAccepted: true
        avatar:
          href: "https://dummylogos.com/logo.png"
        firstName: "Test"
        balance: 100.0
        phone: "79030011222"
        company: "Dummy company"
        currency:
          htmlSymbol: "&pound;"
          unicodeSymbol: "£"
          id: "GBP"
        id: 1
        email: "test@test.com"
        username: "Test"
        status: "A"
      status: "A"
  Contact:
    type: "object"
    required:
    - "avatar"
    - "blocked"
    - "companyName"
    - "country"
    - "customFields"
    - "email"
    - "favorited"
    - "firstName"
    - "id"
    - "lastName"
    - "lists"
    - "notes"
    - "phone"
    - "phoneType"
    - "user"
    properties:
      id:
        type: "integer"
        example: 224
      favorited:
        type: "boolean"
        example: true
      blocked:
        type: "boolean"
        example: true
      firstName:
        type: "string"
        example: "Test first name"
        x-nullable: true
      lastName:
        type: "string"
        example: "Test last name"
        x-nullable: true
      companyName:
        type: "string"
        example: "Test company name"
        x-nullable: true
      phone:
        type: "string"
        example: "79030011222"
        x-nullable: true
      email:
        type: "string"
        format: "email"
        example: "test@test.com"
        x-nullable: true
      country:
        $ref: "#/definitions/Country"
      customFields:
        type: "array"
        items:
          $ref: "#/definitions/ContactCustomField"
      user:
        $ref: "#/definitions/User"
      lists:
        type: "array"
        items:
          $ref: "#/definitions/Group"
      phoneType:
        type: "string"
        x-nullable: true
      avatar:
        $ref: "#/definitions/ContactImage"
      notes:
        type: "array"
        items:
          $ref: "#/definitions/ContactNote"
    example:
      lastName: "Test last name"
      country:
        name: "India"
        id: "US"
      phoneType: "phoneType"
      notes:
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        note: "Test note"
        id: 5
        user:
          emailAccepted: true
          lastName: "Test"
          country:
            name: "India"
            id: "US"
          subaccountType: "P"
          timezone:
            area: "Europe"
            dst: 1
            offset: 10800
            timezone: "Europe\\/Tallinn"
            id: 55
          phoneAccepted: true
          avatar:
            href: "https://dummylogos.com/logo.png"
          firstName: "Test"
          balance: 100.0
          phone: "79030011222"
          company: "Dummy company"
          currency:
            htmlSymbol: "&pound;"
            unicodeSymbol: "£"
            id: "GBP"
          id: 1
          email: "test@test.com"
          username: "Test"
          status: "A"
      - createdAt: "2000-01-23T04:56:07.000+00:00"
        note: "Test note"
        id: 5
        user:
          emailAccepted: true
          lastName: "Test"
          country:
            name: "India"
            id: "US"
          subaccountType: "P"
          timezone:
            area: "Europe"
            dst: 1
            offset: 10800
            timezone: "Europe\\/Tallinn"
            id: 55
          phoneAccepted: true
          avatar:
            href: "https://dummylogos.com/logo.png"
          firstName: "Test"
          balance: 100.0
          phone: "79030011222"
          company: "Dummy company"
          currency:
            htmlSymbol: "&pound;"
            unicodeSymbol: "£"
            id: "GBP"
          id: 1
          email: "test@test.com"
          username: "Test"
          status: "A"
      customFields:
      - userCustomField:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          name: "My new custom field"
          id: 23
        value: "value"
      - userCustomField:
          createdAt: "2000-01-23T04:56:07.000+00:00"
          name: "My new custom field"
          id: 23
        value: "value"
      companyName: "Test company name"
      avatar:
        href: "href"
      firstName: "Test first name"
      blocked: true
      phone: "79030011222"
      lists:
      - shared: true
        membersCount: 10
        isDefault: true
        service: true
        name: "Test group"
        description: "Test group description"
        id: 1
        avatar:
          href: "href"
        user:
          emailAccepted: true
          lastName: "Test"
          country:
            name: "India"
            id: "US"
          subaccountType: "P"
          timezone:
            area: "Europe"
            dst: 1
            offset: 10800
            timezone: "Europe\\/Tallinn"
            id: 55
          phoneAccepted: true
          avatar:
            href: "https://dummylogos.com/logo.png"
          firstName: "Test"
          balance: 100.0
          phone: "79030011222"
          company: "Dummy company"
          currency:
            htmlSymbol: "&pound;"
            unicodeSymbol: "£"
            id: "GBP"
          id: 1
          email: "test@test.com"
          username: "Test"
          status: "A"
        favorited: false
      - shared: true
        membersCount: 10
        isDefault: true
        service: true
        name: "Test group"
        description: "Test group description"
        id: 1
        avatar:
          href: "href"
        user:
          emailAccepted: true
          lastName: "Test"
          country:
            name: "India"
            id: "US"
          subaccountType: "P"
          timezone:
            area: "Europe"
            dst: 1
            offset: 10800
            timezone: "Europe\\/Tallinn"
            id: 55
          phoneAccepted: true
          avatar:
            href: "https://dummylogos.com/logo.png"
          firstName: "Test"
          balance: 100.0
          phone: "79030011222"
          company: "Dummy company"
          currency:
            htmlSymbol: "&pound;"
            unicodeSymbol: "£"
            id: "GBP"
          id: 1
          email: "test@test.com"
          username: "Test"
          status: "A"
        favorited: false
      id: 224
      user:
        emailAccepted: true
        lastName: "Test"
        country:
          name: "India"
          id: "US"
        subaccountType: "P"
        timezone:
          area: "Europe"
          dst: 1
          offset: 10800
          timezone: "Europe\\/Tallinn"
          id: 55
        phoneAccepted: true
        avatar:
          href: "https://dummylogos.com/logo.png"
        firstName: "Test"
        balance: 100.0
        phone: "79030011222"
        company: "Dummy company"
        currency:
          htmlSymbol: "&pound;"
          unicodeSymbol: "£"
          id: "GBP"
        id: 1
        email: "test@test.com"
        username: "Test"
        status: "A"
      email: "test@test.com"
      favorited: true
    x-nullable: true
  UserCustomField:
    type: "object"
    required:
    - "createdAt"
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        example: 23
      name:
        type: "string"
        example: "My new custom field"
      createdAt:
        type: "string"
        format: "date-time"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      name: "My new custom field"
      id: 23
  Group:
    type: "object"
    required:
    - "avatar"
    - "description"
    - "favorited"
    - "id"
    - "isDefault"
    - "membersCount"
    - "name"
    - "service"
    - "shared"
    - "user"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "Test group"
      description:
        type: "string"
        example: "Test group description"
        x-nullable: true
      favorited:
        type: "boolean"
        example: false
      membersCount:
        type: "integer"
        example: 10
      user:
        $ref: "#/definitions/User"
      service:
        type: "boolean"
      shared:
        type: "boolean"
        x-nullable: true
      avatar:
        $ref: "#/definitions/GroupImage"
      isDefault:
        type: "boolean"
        x-nullable: true
    example:
      shared: true
      membersCount: 10
      isDefault: true
      service: true
      name: "Test group"
      description: "Test group description"
      id: 1
      avatar:
        href: "href"
      user:
        emailAccepted: true
        lastName: "Test"
        country:
          name: "India"
          id: "US"
        subaccountType: "P"
        timezone:
          area: "Europe"
          dst: 1
          offset: 10800
          timezone: "Europe\\/Tallinn"
          id: 55
        phoneAccepted: true
        avatar:
          href: "https://dummylogos.com/logo.png"
        firstName: "Test"
        balance: 100.0
        phone: "79030011222"
        company: "Dummy company"
        currency:
          htmlSymbol: "&pound;"
          unicodeSymbol: "£"
          id: "GBP"
        id: 1
        email: "test@test.com"
        username: "Test"
        status: "A"
      favorited: false
  UnsubscribedContact:
    type: "object"
    required:
    - "firstName"
    - "id"
    - "lastName"
    - "phone"
    - "unsubscribeTime"
    properties:
      id:
        type: "integer"
        example: 1
      phone:
        type: "string"
        example: "+1386673549434"
      unsubscribeTime:
        type: "string"
        format: "date-time"
      firstName:
        type: "string"
        example: "Test fist name"
        x-nullable: true
      lastName:
        type: "string"
        example: "Test last name"
        x-nullable: true
    example:
      firstName: "Test fist name"
      lastName: "Test last name"
      phone: "+1386673549434"
      unsubscribeTime: "2000-01-23T04:56:07.000+00:00"
      id: 1
  ContactNote:
    type: "object"
    required:
    - "createdAt"
    - "id"
    - "note"
    - "user"
    properties:
      id:
        type: "integer"
        example: 5
      createdAt:
        type: "string"
        format: "date-time"
      note:
        type: "string"
        example: "Test note"
      user:
        $ref: "#/definitions/User"
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      note: "Test note"
      id: 5
      user:
        emailAccepted: true
        lastName: "Test"
        country:
          name: "India"
          id: "US"
        subaccountType: "P"
        timezone:
          area: "Europe"
          dst: 1
          offset: 10800
          timezone: "Europe\\/Tallinn"
          id: 55
        phoneAccepted: true
        avatar:
          href: "https://dummylogos.com/logo.png"
        firstName: "Test"
        balance: 100.0
        phone: "79030011222"
        company: "Dummy company"
        currency:
          htmlSymbol: "&pound;"
          unicodeSymbol: "£"
          id: "GBP"
        id: 1
        email: "test@test.com"
        username: "Test"
        status: "A"
  MessageTemplate:
    type: "object"
    required:
    - "content"
    - "id"
    - "lastModified"
    - "name"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "This is test template name"
      content:
        type: "string"
        example: "This is test template content"
      lastModified:
        type: "string"
        format: "date-time"
        x-nullable: true
    example:
      name: "This is test template name"
      id: 1
      lastModified: "2000-01-23T04:56:07.000+00:00"
      content: "This is test template content"
  MessageOut:
    type: "object"
    required:
    - "avatar"
    - "charset"
    - "charsetLabel"
    - "contactId"
    - "country"
    - "firstName"
    - "id"
    - "lastName"
    - "messageTime"
    - "partsCount"
    - "sessionId"
    - "status"
    - "text"
    properties:
      id:
        type: "integer"
        example: 1
      contactId:
        type: "integer"
        example: 1
        x-nullable: true
      sessionId:
        type: "integer"
        example: 1
        x-nullable: true
      receiver:
        type: "string"
        example: "19993322110"
      messageTime:
        type: "string"
        format: "date-time"
        example: "2019-08-12T11:43:37+0000"
      status:
        type: "string"
        example: "q"
        description: "q - queued s - scheduled queue e - sending error r - enroute\
          \ a - acked d - delivered b - buffered f - failed u - unknown j - rejected\
          \ i - bulk insert p - scheduled suspend h - queue suspend"
        enum:
        - "q"
        - "s"
        - "e"
        - "r"
        - "a"
        - "d"
        - "b"
        - "f"
        - "u"
        - "j"
        - "i"
        - "p"
        - "h"
      avatar:
        type: "string"
        example: "avatars/dummy_avatar.png"
        x-nullable: true
      text:
        type: "string"
        example: "Test message"
      deleted:
        type: "boolean"
        example: false
      charset:
        type: "string"
        example: "ISO-8859-1"
        x-nullable: true
      charsetLabel:
        type: "string"
        example: "ISO-8859-1"
        x-nullable: true
      firstName:
        type: "string"
        example: "Test first name"
        x-nullable: true
      lastName:
        type: "string"
        example: "Test last name"
        x-nullable: true
      country:
        type: "string"
        example: "US"
        x-nullable: true
      sender:
        type: "string"
        example: "447624800500"
        x-nullable: true
      phone:
        type: "string"
        example: "447624800500"
        x-nullable: true
      price:
        type: "number"
        format: "float"
        example: 0.025
        x-nullable: true
      partsCount:
        type: "integer"
        example: 1
        x-nullable: true
      fromEmail:
        type: "string"
        example: "test@email.com"
        x-nullable: true
      fromNumber:
        type: "string"
        example: "447624800500"
        x-nullable: true
      smscId:
        type: "string"
        example: "1"
        x-nullable: true
      contact:
        type: "string"
        x-nullable: true
      source:
        type: "string"
        example: "1"
        x-nullable: true
      deliveredCount:
        type: "integer"
        x-nullable: true
      numbersCount:
        type: "integer"
        x-nullable: true
      userId:
        type: "integer"
        x-nullable: true
      creditsPrice:
        type: "string"
        x-nullable: true
      chars:
        type: "integer"
        x-nullable: true
    example:
      messageTime: "2019-08-12T11:43:37+0000"
      charset: "ISO-8859-1"
      lastName: "Test last name"
      country: "US"
      partsCount: 1
      creditsPrice: "creditsPrice"
      source: "1"
      fromEmail: "test@email.com"
      price: 0.025
      smscId: "1"
      contact: "contact"
      id: 1
      text: "Test message"
      receiver: "19993322110"
      contactId: 1
      sessionId: 1
      avatar: "avatars/dummy_avatar.png"
      userId: 1
      fromNumber: "447624800500"
      firstName: "Test first name"
      deleted: false
      numbersCount: 6
      sender: "447624800500"
      phone: "447624800500"
      deliveredCount: 0
      charsetLabel: "ISO-8859-1"
      chars: 5
      status: "q"
  MessagesIcs:
    type: "object"
    required:
    - "avatar"
    - "completed"
    - "contactName"
    - "createdAt"
    - "firstOccurrence"
    - "id"
    - "lastOccurrence"
    - "lastSent"
    - "nextSend"
    - "parameters"
    - "recipientsCount"
    - "rrule"
    - "session"
    - "summary"
    - "textParameters"
    - "timezone"
    - "type"
    properties:
      id:
        type: "integer"
        example: 1
      nextSend:
        type: "string"
        format: "date-time"
      rrule:
        type: "string"
        example: "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1"
        x-nullable: true
      session:
        $ref: "#/definitions/MessageSession"
      lastSent:
        type: "string"
        format: "date-time"
        x-nullable: true
      contactName:
        type: "string"
        example: "Test contact name"
      parameters:
        $ref: "#/definitions/MessagesIcs_parameters"
      type:
        type: "string"
        example: "once"
      summary:
        type: "string"
        example: "once"
      textParameters:
        $ref: "#/definitions/MessagesIcs_textParameters"
      firstOccurrence:
        type: "string"
        format: "date-time"
        example: "2019-08-13T05:48:37.486Z"
        x-nullable: true
      lastOccurrence:
        type: "string"
        format: "date-time"
        example: "2019-09-13T05:48:37.486Z"
        x-nullable: true
      recipientsCount:
        type: "integer"
        example: 2
        x-nullable: true
      timezone:
        type: "string"
        example: "Europe/Tallinn"
      completed:
        type: "boolean"
        example: true
      avatar:
        type: "string"
        example: "avatars/dummy_avatar.png"
        x-nullable: true
      createdAt:
        type: "string"
        format: "date-time"
    example:
      summary: "once"
      session:
        numbersCount: 1
        price: 0.05
        destination: "t"
        startTime: "startTime"
        id: 1
        text: "Sample message text"
        source: "A"
        referenceId: "1"
      contactName: "Test contact name"
      timezone: "Europe/Tallinn"
      completed: true
      avatar: "avatars/dummy_avatar.png"
      lastSent: "2000-01-23T04:56:07.000+00:00"
      type: "once"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      rrule: "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1"
      recipientsCount: 2
      textParameters:
        cost: 0.025
        parts: 6
        countries:
        - "US"
        - "US"
        encoding: "ISO-8859-1"
        charsetLabel: "ISO-8859-1"
        chars: 5
      firstOccurrence: "2019-08-13T05:48:37.486Z"
      lastOccurrence: "2019-09-13T05:48:37.486Z"
      id: 1
      nextSend: "2000-01-23T04:56:07.000+00:00"
      parameters:
        recipients:
          numbers:
          - "19993322111"
          - "19993322111"
          groups:
          - 39318
          - 39318
          contacts:
          - 39318
          - 39318
        text: "Sample text"
  MessageIn:
    type: "object"
    required:
    - "avatar"
    - "id"
    - "messageTime"
    - "receiver"
    - "sender"
    - "text"
    properties:
      id:
        type: "integer"
        example: 1
      sender:
        type: "string"
        example: "19993322111"
      receiver:
        type: "string"
        example: "19993322222"
        x-nullable: true
      messageTime:
        type: "string"
        format: "date-time"
      text:
        type: "string"
        example: "Sample message text"
      contactId:
        type: "integer"
        example: 1
        x-nullable: true
      firstName:
        type: "string"
        example: "Test first name"
        x-nullable: true
      lastName:
        type: "string"
        example: "Test last name"
        x-nullable: true
      avatar:
        type: "string"
        example: "avatars/dummy_avatar.png"
        x-nullable: true
    example:
      messageTime: "2000-01-23T04:56:07.000+00:00"
      firstName: "Test first name"
      lastName: "Test last name"
      receiver: "19993322222"
      sender: "19993322111"
      contactId: 1
      id: 1
      text: "Sample message text"
      avatar: "avatars/dummy_avatar.png"
  MessageSession:
    type: "object"
    required:
    - "destination"
    - "id"
    - "numbersCount"
    - "price"
    - "referenceId"
    - "source"
    - "startTime"
    - "text"
    properties:
      id:
        type: "integer"
        example: 1
      startTime:
        type: "string"
        x-nullable: true
      text:
        type: "string"
        example: "Sample message text"
        x-nullable: true
      source:
        type: "string"
        example: "A"
        x-nullable: true
      referenceId:
        type: "string"
        example: "1"
        x-nullable: true
      price:
        type: "number"
        example: 0.05
        x-nullable: true
      numbersCount:
        type: "integer"
        example: 1
        x-nullable: true
      destination:
        type: "string"
        example: "t"
        x-nullable: true
    example:
      numbersCount: 1
      price: 0.05
      destination: "t"
      startTime: "startTime"
      id: 1
      text: "Sample message text"
      source: "A"
      referenceId: "1"
    x-nullable: true
  BulkSession:
    type: "object"
    required:
    - "createdAt"
    - "id"
    - "itemsProcessed"
    - "itemsTotal"
    - "session"
    - "status"
    - "text"
    properties:
      id:
        type: "integer"
        example: 1
      status:
        type: "string"
        example: "n"
      itemsProcessed:
        type: "integer"
        example: 0
        x-nullable: true
      itemsTotal:
        type: "integer"
        example: 2
        x-nullable: true
      createdAt:
        type: "string"
        format: "date-time"
      session:
        $ref: "#/definitions/MessageSession"
      text:
        type: "string"
        example: "Sample text"
        x-nullable: true
    example:
      createdAt: "2000-01-23T04:56:07.000+00:00"
      itemsProcessed: 0
      itemsTotal: 2
      session:
        numbersCount: 1
        price: 0.05
        destination: "t"
        startTime: "startTime"
        id: 1
        text: "Sample message text"
        source: "A"
        referenceId: "1"
      id: 1
      text: "Sample text"
      status: "n"
  UserStatement:
    type: "object"
    required:
    - "balance"
    - "comment"
    - "date"
    - "delta"
    - "id"
    - "type"
    - "userId"
    - "value"
    properties:
      id:
        type: "integer"
        example: 1
      userId:
        type: "integer"
        example: 1
        x-nullable: true
      date:
        type: "string"
        format: "date-time"
      balance:
        type: "number"
        format: "double"
        example: 101.05
        x-nullable: true
      delta:
        type: "number"
        format: "float"
        example: -10.01
        x-nullable: true
      type:
        type: "string"
        example: "sms"
      value:
        type: "string"
        example: "2"
        x-nullable: true
      comment:
        type: "string"
        example: "This is test comment"
        x-nullable: true
  Invoice:
    type: "object"
    required:
    - "bundle"
    - "currency"
    - "id"
    - "paymentMethod"
    - "vat"
    properties:
      id:
        type: "integer"
      bundle:
        type: "integer"
      currency:
        type: "string"
      vat:
        type: "number"
        format: "float"
      paymentMethod:
        type: "string"
        x-nullable: true
  Chat:
    type: "object"
    required:
    - "contact"
    - "country"
    - "direction"
    - "from"
    - "id"
    - "lastMessage"
    - "mute"
    - "mutedUntil"
    - "originalId"
    - "phone"
    - "status"
    - "timeLeftMute"
    - "unread"
    - "unsubscribedContactId"
    - "updatedAt"
    properties:
      id:
        type: "integer"
        example: 1
      originalId:
        type: "integer"
        example: 1
        x-nullable: true
      phone:
        type: "string"
        example: "19998887766"
      contact:
        $ref: "#/definitions/Contact"
      unsubscribedContactId:
        type: "integer"
        example: 1
        x-nullable: true
      unread:
        type: "integer"
        example: 1
      updatedAt:
        type: "string"
        format: "date-time"
      status:
        type: "string"
      mute:
        type: "integer"
        example: 0
      lastMessage:
        type: "string"
        example: "This is test message"
        x-nullable: true
      direction:
        type: "string"
        x-nullable: true
      from:
        type: "string"
        x-nullable: true
      mutedUntil:
        type: "string"
        x-nullable: true
      timeLeftMute:
        type: "integer"
      country:
        $ref: "#/definitions/Country"
    example:
      country:
        name: "India"
        id: "US"
      unread: 1
      unsubscribedContactId: 1
      lastMessage: "This is test message"
      mute: 0
      phone: "19998887766"
      contact:
        lastName: "Test last name"
        country:
          name: "India"
          id: "US"
        phoneType: "phoneType"
        notes:
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          note: "Test note"
          id: 5
          user:
            emailAccepted: true
            lastName: "Test"
            country:
              name: "India"
              id: "US"
            subaccountType: "P"
            timezone:
              area: "Europe"
              dst: 1
              offset: 10800
              timezone: "Europe\\/Tallinn"
              id: 55
            phoneAccepted: true
            avatar:
              href: "https://dummylogos.com/logo.png"
            firstName: "Test"
            balance: 100.0
            phone: "79030011222"
            company: "Dummy company"
            currency:
              htmlSymbol: "&pound;"
              unicodeSymbol: "£"
              id: "GBP"
            id: 1
            email: "test@test.com"
            username: "Test"
            status: "A"
        - createdAt: "2000-01-23T04:56:07.000+00:00"
          note: "Test note"
          id: 5
          user:
            emailAccepted: true
            lastName: "Test"
            country:
              name: "India"
              id: "US"
            subaccountType: "P"
            timezone:
              area: "Europe"
              dst: 1
              offset: 10800
              timezone: "Europe\\/Tallinn"
              id: 55
            phoneAccepted: true
            avatar:
              href: "https://dummylogos.com/logo.png"
            firstName: "Test"
            balance: 100.0
            phone: "79030011222"
            company: "Dummy company"
            currency:
              htmlSymbol: "&pound;"
              unicodeSymbol: "£"
              id: "GBP"
            id: 1
            email: "test@test.com"
            username: "Test"
            status: "A"
        customFields:
        - userCustomField:
            createdAt: "2000-01-23T04:56:07.000+00:00"
            name: "My new custom field"
            id: 23
          value: "value"
        - userCustomField:
            createdAt: "2000-01-23T04:56:07.000+00:00"
            name: "My new custom field"
            id: 23
          value: "value"
        companyName: "Test company name"
        avatar:
          href: "href"
        firstName: "Test first name"
        blocked: true
        phone: "79030011222"
        lists:
        - shared: true
          membersCount: 10
          isDefault: true
          service: true
          name: "Test group"
          description: "Test group description"
          id: 1
          avatar:
            href: "href"
          user:
            emailAccepted: true
            lastName: "Test"
            country:
              name: "India"
              id: "US"
            subaccountType: "P"
            timezone:
              area: "Europe"
              dst: 1
              offset: 10800
              timezone: "Europe\\/Tallinn"
              id: 55
            phoneAccepted: true
            avatar:
              href: "https://dummylogos.com/logo.png"
            firstName: "Test"
            balance: 100.0
            phone: "79030011222"
            company: "Dummy company"
            currency:
              htmlSymbol: "&pound;"
              unicodeSymbol: "£"
              id: "GBP"
            id: 1
            email: "test@test.com"
            username: "Test"
            status: "A"
          favorited: false
        - shared: true
          membersCount: 10
          isDefault: true
          service: true
          name: "Test group"
          description: "Test group description"
          id: 1
          avatar:
            href: "href"
          user:
            emailAccepted: true
            lastName: "Test"
            country:
              name: "India"
              id: "US"
            subaccountType: "P"
            timezone:
              area: "Europe"
              dst: 1
              offset: 10800
              timezone: "Europe\\/Tallinn"
              id: 55
            phoneAccepted: true
            avatar:
              href: "https://dummylogos.com/logo.png"
            firstName: "Test"
            balance: 100.0
            phone: "79030011222"
            company: "Dummy company"
            currency:
              htmlSymbol: "&pound;"
              unicodeSymbol: "£"
              id: "GBP"
            id: 1
            email: "test@test.com"
            username: "Test"
            status: "A"
          favorited: false
        id: 224
        user:
          emailAccepted: true
          lastName: "Test"
          country:
            name: "India"
            id: "US"
          subaccountType: "P"
          timezone:
            area: "Europe"
            dst: 1
            offset: 10800
            timezone: "Europe\\/Tallinn"
            id: 55
          phoneAccepted: true
          avatar:
            href: "https://dummylogos.com/logo.png"
          firstName: "Test"
          balance: 100.0
          phone: "79030011222"
          company: "Dummy company"
          currency:
            htmlSymbol: "&pound;"
            unicodeSymbol: "£"
            id: "GBP"
          id: 1
          email: "test@test.com"
          username: "Test"
          status: "A"
        email: "test@test.com"
        favorited: true
      timeLeftMute: 0
      from: "from"
      id: 1
      originalId: 1
      mutedUntil: "mutedUntil"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
      status: "status"
      direction: "direction"
  Conversation:
    type: "object"
    required:
    - "direction"
    - "firstName"
    - "id"
    - "lastName"
    - "messageTime"
    - "receiver"
    - "sender"
    - "sessionId"
    - "status"
    - "text"
    properties:
      id:
        type: "integer"
        example: 1
      direction:
        type: "string"
      sender:
        type: "string"
        x-nullable: true
      messageTime:
        type: "string"
        format: "date-time"
      text:
        type: "string"
        example: "This is sample message"
      receiver:
        type: "string"
      status:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      sessionId:
        type: "integer"
        x-nullable: true
  Survey:
    type: "object"
    required:
    - "createdAt"
    - "id"
    - "name"
    - "status"
    - "updatedAt"
    properties:
      id:
        type: "integer"
        example: 1
      name:
        type: "string"
        example: "My test survey"
      status:
        type: "string"
      createdAt:
        type: "string"
        format: "date-time"
      updatedAt:
        type: "string"
        format: "date-time"
      receipents:
        type: "array"
        items:
          $ref: "#/definitions/SurveyRecipient"
      countries:
        type: "array"
        items:
          $ref: "#/definitions/SurveySenderCountries"
    example:
      receipents:
      - phone: "phone"
      - phone: "phone"
      createdAt: "2000-01-23T04:56:07.000+00:00"
      name: "My test survey"
      id: 1
      countries:
      - fromNumber: "7587773169425"
        allowDedicated: true
        id: 1
        countryName: "GB"
      - fromNumber: "7587773169425"
        allowDedicated: true
        id: 1
        countryName: "GB"
      status: "status"
      updatedAt: "2000-01-23T04:56:07.000+00:00"
  SurveyRecipient:
    required:
    - "phone"
    properties:
      phone:
        type: "string"
    example:
      phone: "phone"
  SurveySenderCountries:
    required:
    - "allowDedicated"
    - "countryName"
    - "fromNumber"
    - "id"
    properties:
      id:
        type: "integer"
        example: 1
      countryName:
        type: "string"
        example: "GB"
      fromNumber:
        type: "string"
        example: "7587773169425"
      allowDedicated:
        type: "boolean"
        example: true
    example:
      fromNumber: "7587773169425"
      allowDedicated: true
      id: 1
      countryName: "GB"
  Currency:
    type: "object"
    required:
    - "htmlSymbol"
    - "id"
    - "unicodeSymbol"
    properties:
      id:
        type: "string"
        example: "GBP"
      unicodeSymbol:
        type: "string"
        example: "£"
      htmlSymbol:
        type: "string"
        example: "&pound;"
    example:
      htmlSymbol: "&pound;"
      unicodeSymbol: "£"
      id: "GBP"
  Country:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        example: "US"
      name:
        type: "string"
        example: "India"
    example:
      name: "India"
      id: "US"
    x-nullable: true
  Timezone:
    type: "object"
    required:
    - "area"
    - "dst"
    - "id"
    - "offset"
    - "timezone"
    properties:
      id:
        type: "integer"
        example: 55
      area:
        type: "string"
        example: "Europe"
      dst:
        type: "integer"
        example: 1
      offset:
        type: "integer"
        example: 10800
      timezone:
        type: "string"
        example: "Europe\\/Tallinn"
    example:
      area: "Europe"
      dst: 1
      offset: 10800
      timezone: "Europe\\/Tallinn"
      id: 55
  UserImage:
    type: "object"
    required:
    - "href"
    properties:
      href:
        type: "string"
        example: "https://dummylogos.com/logo.png"
    example:
      href: "https://dummylogos.com/logo.png"
    x-nullable: true
  ContactCustomField:
    type: "object"
    properties:
      value:
        type: "string"
      userCustomField:
        $ref: "#/definitions/UserCustomField"
    example:
      userCustomField:
        createdAt: "2000-01-23T04:56:07.000+00:00"
        name: "My new custom field"
        id: 23
      value: "value"
  ContactImage:
    type: "object"
    required:
    - "href"
    properties:
      href:
        type: "string"
    example:
      href: "href"
    x-nullable: true
  GroupImage:
    type: "object"
    required:
    - "href"
    properties:
      href:
        type: "string"
    example:
      href: "href"
    x-nullable: true
  SurveyNode:
    required:
    - "body"
    - "endNodes"
    - "id"
    - "isEndNode"
    - "label"
    - "nodeType"
    - "sendDelay"
    - "startNodes"
    properties:
      id:
        type: "integer"
        example: 1
      label:
        type: "string"
        example: "Question 1"
      body:
        type: "string"
        example: "Hello {First name}! Would you like to participate in a short survey?\
          \ To continue, just reply Yes."
      nodeType:
        type: "string"
        example: "q"
      isEndNode:
        type: "boolean"
        example: false
      sendDelay:
        type: "integer"
        example: 0
      startNodes:
        type: "array"
        items:
          type: "string"
          example: "1"
        x-nullable: true
      endNodes:
        type: "array"
        items:
          type: "string"
          example: "1"
        x-nullable: true
    example:
      isEndNode: false
      endNodes:
      - "1"
      - "1"
      startNodes:
      - "1"
      - "1"
      id: 1
      label: "Question 1"
      body: "Hello {First name}! Would you like to participate in a short survey?\
        \ To continue, just reply Yes."
      nodeType: "q"
      sendDelay: 0
  ForwardedCall:
    required:
    - "callTime"
    - "caller"
    - "id"
    - "receiver"
    - "via"
    properties:
      id:
        type: "integer"
      callTime:
        type: "string"
        format: "date-time"
      caller:
        type: "string"
        example: "19998887766"
      via:
        type: "string"
        example: "1"
        description: "Inbound id"
      receiver:
        type: "string"
        example: "19998887765"
  MessagingStatItem:
    type: "object"
    required:
    - "costs"
    - "date"
    - "deliveryRate"
    - "messagesReceived"
    - "messagesSentAccepted"
    - "messagesSentBuffered"
    - "messagesSentDelivered"
    - "messagesSentFailed"
    - "messagesSentParts"
    - "messagesSentRejected"
    - "replyRate"
    properties:
      replyRate:
        type: "number"
        format: "float"
        example: 55.1
        x-nullable: true
      date:
        type: "string"
        format: "date-time"
        x-nullable: true
      deliveryRate:
        type: "number"
        format: "float"
        example: 99.5
        x-nullable: true
      costs:
        type: "number"
        format: "float"
        example: 10.01
        x-nullable: true
      messagesReceived:
        type: "integer"
        example: 1
        x-nullable: true
      messagesSentDelivered:
        type: "integer"
        example: 1
        x-nullable: true
      messagesSentAccepted:
        type: "integer"
        example: 1
        x-nullable: true
      messagesSentBuffered:
        type: "integer"
        example: 1
        x-nullable: true
      messagesSentFailed:
        type: "integer"
        example: 1
        x-nullable: true
      messagesSentRejected:
        type: "integer"
        example: 1
        x-nullable: true
      messagesSentParts:
        type: "integer"
        example: 1
        x-nullable: true
  PushToken:
    type: "object"
    required:
    - "token"
    - "type"
    properties:
      type:
        type: "string"
        example: "a"
      token:
        type: "string"
        example: "03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2"
  SubaccountWithToken:
    required:
    - "avatar"
    - "balance"
    - "company"
    - "country"
    - "currency"
    - "email"
    - "emailAccepted"
    - "firstName"
    - "id"
    - "lastName"
    - "phone"
    - "phoneAccepted"
    - "status"
    - "subaccountType"
    - "timezone"
    - "token"
    - "username"
    properties:
      id:
        type: "integer"
        example: 1
      username:
        type: "string"
        example: "Test"
      firstName:
        type: "string"
        example: "Test"
      lastName:
        type: "string"
        example: "Test"
      email:
        type: "string"
        example: "test@test.com"
      status:
        type: "string"
        example: "A"
      balance:
        type: "number"
        format: "double"
        example: 1.0
      phone:
        type: "string"
        example: "79030011222"
      company:
        type: "string"
        example: "Dummy company"
      currency:
        $ref: "#/definitions/Currency"
      country:
        $ref: "#/definitions/Country"
      timezone:
        $ref: "#/definitions/Timezone"
      subaccountType:
        type: "string"
        example: "P"
      emailAccepted:
        type: "boolean"
        example: true
      phoneAccepted:
        type: "boolean"
        example: true
      avatar:
        $ref: "#/definitions/UserImage"
      token:
        type: "string"
        example: "TokenOfSubaccountPlacedHere"
  FavoriteContact:
    required:
    - "avatar"
    - "entityId"
    - "entityType"
    - "primaryLabel"
    - "secondaryLabel"
    - "tertiaryLabel"
    properties:
      entityId:
        type: "integer"
        example: 1
      entityType:
        type: "string"
        example: "contact"
        description: ""
        enum:
        - "list"
        - "contact"
      primaryLabel:
        type: "string"
        example: "Test list"
        description: "Contact first name/last name if entityType is \\'contact\\',\
          \ List name if entity type is \\'list\\'"
      secondaryLabel:
        type: "string"
        example: "45"
        description: "Phone number if entityType is \\'contact\\', List contacts number\
          \ if entity type is \\'list\\'"
      tertiaryLabel:
        type: "string"
        example: "Australia"
        description: "Contact country if entityType is \\'contact\\' else null"
      avatar:
        type: "string"
        example: "avatars/dummy_avatar.png"
        x-nullable: true
  DoAuthInputObject:
    type: "object"
    required:
    - "password"
    - "username"
    properties:
      username:
        type: "string"
        example: "test@test.com"
        description: "Account username or email"
      password:
        type: "string"
        example: "test"
        description: "Account password"
      appName:
        type: "string"
        example: "My application"
        description: "Application name"
        x-nullable: false
      appVersion:
        type: "string"
        example: "1.0.0 beta"
        description: "Application version"
        x-nullable: false
      deviceId:
        type: "string"
        example: "03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2"
        description: "Device ID for push notification service"
        x-nullable: false
      pushServiceType:
        type: "string"
        example: "a"
        description: "required when deviceId provided. Push notification service type:\
          \ a for Apple Push Notifications, g for Google Cloud Messaging"
        x-nullable: false
      tfaCode:
        type: "string"
        example: "12345"
        description: "required when 2FA enabled on account. 2FA challenge response\
          \ (SMS code or security question answer)"
        x-nullable: false
      tfaId:
        type: "string"
        example: "12345"
        description: "required when 2FA enabled on account. 2FA challenge response\
          \ (SMS code or security question answer)"
        x-nullable: false
    example:
      password: "test"
      appVersion: "1.0.0 beta"
      tfaCode: "12345"
      appName: "My application"
      tfaId: "12345"
      deviceId: "03df25c845d460bcdad7802d2vf6fc1dfde97283bf75cc993eb6dca835ea2e2"
      pushServiceType: "a"
      username: "test@test.com"
  CreatePushTokenInputObject:
    type: "object"
    required:
    - "deviceId"
    - "pushServiceType"
    properties:
      deviceId:
        type: "string"
        example: "123"
        description: "Device ID for push notification service"
      pushServiceType:
        type: "string"
        example: "a"
        description: "Push notification service type: a for Apple Push Notifications,\
          \ g for Google Cloud Messaging"
    example:
      deviceId: "123"
      pushServiceType: "a"
  CheckPhoneVerificationCodeInputObject:
    required:
    - "code"
    properties:
      code:
        type: "integer"
        example: 1111
    description: "Confirmation code to check"
    example:
      code: 1111
  UpdatePasswordInputObject:
    type: "object"
    required:
    - "newPassword"
    - "oldPassword"
    properties:
      oldPassword:
        type: "string"
        example: "myOldPassword"
        description: "Current password"
      newPassword:
        type: "string"
        example: "myNewPassword"
        description: "New password"
    example:
      oldPassword: "myOldPassword"
      newPassword: "myNewPassword"
  UpdateSenderSettingInputObject:
    type: "object"
    required:
    - "country"
    - "value"
    properties:
      value:
        type: "string"
        example: "447624800500"
        description: "Available phone number in international E.164 format or senderid."
      country:
        type: "string"
        example: "AF"
        description: "Country for which the setting will be set."
      chatId:
        type: "integer"
        example: 344
        description: "Set sender setting for specified chat only."
    example:
      country: "AF"
      chatId: 344
      value: "447624800500"
  BuyDedicatedNumberInputObject:
    type: "object"
    required:
    - "country"
    - "phone"
    - "userId"
    properties:
      phone:
        type: "string"
        example: "123456780"
        description: "Desired dedicated phone number in international E.164 format"
      country:
        type: "string"
        example: "AU"
        description: "Dedicated number country. Two charactes in upper case."
      userId:
        type: "integer"
        description: "User ID this number will be assigned to"
    example:
      country: "AU"
      phone: "123456780"
      userId: 0
  RequestSenderIdInputObject:
    required:
    - "explanation"
    - "senderId"
    properties:
      senderId:
        type: "string"
        example: "Testid1"
        description: "Alphanumeric Sender ID (maximum 11 characters)"
      explanation:
        type: "string"
        example: "Test description"
        description: "Explain why do you need this Sender ID"
    example:
      senderId: "Testid1"
      explanation: "Test description"
  InviteSubaccountInputObject:
    required:
    - "email"
    - "role"
    properties:
      email:
        type: "string"
        format: "email"
        example: "user-example@example.com"
        description: "Subaccount email"
      role:
        type: "string"
        format: "email"
        example: "U"
        description: "Subaccount role: A for administrator or U for regular user"
        enum:
        - "A"
        - "U"
    example:
      role: "U"
      email: "user-example@example.com"
  RequestNewSubaccountTokenInputObject:
    required:
    - "password"
    - "userId"
    properties:
      userId:
        type: "integer"
        example: 1
        description: "Subaccount ID"
      password:
        type: "string"
        example: "strongPassword"
        description: "Your account password"
      appName:
        type: "string"
        example: "sample app"
        description: "Application name"
    example:
      password: "strongPassword"
      appName: "sample app"
      userId: 1
  GetSubaccountsWithTokensInputObject:
    required:
    - "appName"
    - "password"
    properties:
      appName:
        type: "string"
        example: "sample app"
        description: "Application name"
      password:
        type: "string"
        example: "strongPassword"
        description: "Your account password"
    example:
      password: "strongPassword"
      appName: "sample app"
  UpdateBalanceNotificationSettingsInputObject:
    required:
    - "alertBalance"
    properties:
      lowBalanceNotification:
        type: "boolean"
        example: true
        description: "Should user receive low balance notification"
      alertBalance:
        type: "string"
        example: "50"
        description: "If balance is below this value, user receive low balance notification"
      alertPhone:
        type: "string"
        example: "15417543010"
        description: "Low balance notification phone number"
      alertEmail1:
        type: "string"
        example: "test@test.com"
        description: "Low balance notification email 1"
      alertEmail2:
        type: "string"
        example: "test@test.com"
        description: "Low balance notification email 2"
      alertEmail3:
        type: "string"
        example: "test@test.com"
        description: "Low balance notification email 3"
    example:
      alertBalance: "50"
      alertPhone: "15417543010"
      alertEmail1: "test@test.com"
      alertEmail2: "test@test.com"
      alertEmail3: "test@test.com"
      lowBalanceNotification: true
  UpdateInboundMessagesNotificationSettingsInputObject:
    required:
    - "inboundMessageNotification"
    - "includeSmsHistory"
    - "sendInHtmlFormat"
    properties:
      inboundMessageNotification:
        type: "boolean"
        example: true
        description: "Should user receive notification about new incoming messages"
      includeSmsHistory:
        type: "boolean"
        example: true
        description: "Include SMS history into notification Email"
      sendInHtmlFormat:
        type: "boolean"
        example: true
        description: "Send Email notification in HTML format"
      alertEmail1:
        type: "string"
        format: "email"
        example: "test@test.com"
        description: "New message notification email 2"
      alertEmail2:
        type: "string"
        format: "email"
        example: "test@test.com"
        description: "New message notification email 2"
      alertEmail3:
        type: "string"
        format: "email"
        example: "test@test.com"
        description: "New message notification email 3"
    example:
      sendInHtmlFormat: true
      alertEmail1: "test@test.com"
      alertEmail2: "test@test.com"
      includeSmsHistory: true
      alertEmail3: "test@test.com"
      inboundMessageNotification: true
  UpdateChatDesktopNotificationSettingsInputObject:
    type: "object"
    required:
    - "playSound"
    - "showNotifications"
    properties:
      playSound:
        type: "boolean"
        example: false
        description: "Notification sound is enable/disabled"
      showNotifications:
        type: "boolean"
        example: false
        description: "Show desktop notifications about new messages"
      showText:
        type: "boolean"
        example: true
        description: "Incoming message text will be displayed in desktop notifications."
      soundId:
        type: "integer"
        example: 1
        description: "Sound Id of a notification"
    example:
      soundId: 1
      playSound: false
      showText: true
      showNotifications: false
  UpdateCallbackSettingsInputObject:
    required:
    - "format"
    - "inUrl"
    - "outUrl"
    properties:
      outUrl:
        type: "string"
        example: "http://www.mysite.com/delivery-callback.php"
        description: "This URL is used to push message delivery status updates to\
          \ your application."
        x-nullable: true
      inUrl:
        type: "string"
        example: "http://www.mysite.com/incoming-sms-callback.php"
        description: "This URL is used to push incoming SMS to your application."
        x-nullable: true
      format:
        type: "string"
        description: "Desired callback data format. m - multipart/form-data, u - application/x-www-form-urlencoded,\
          \ j - application/json"
        enum:
        - "m"
        - "u"
        - "j"
    example:
      inUrl: "http://www.mysite.com/incoming-sms-callback.php"
      outUrl: "http://www.mysite.com/delivery-callback.php"
      format: "m"
  CreateContactInputObject:
    required:
    - "lists"
    - "phone"
    properties:
      firstName:
        type: "string"
        example: "Example first name"
        description: "Contact first name"
      lastName:
        type: "string"
        example: "Example first name"
        description: "Contact last name"
      phone:
        type: "string"
        example: "+23058300573"
        description: "Contact phone number in E.164 (international) format without\
          \ leading + or zeroes"
      email:
        type: "string"
        format: "email"
        example: "test@test.com"
        description: "Contact email"
      companyName:
        type: "string"
        example: "My pretty company"
        description: "Contact company name"
      lists:
        type: "string"
        example: "1,2,3,4"
        description: "Array of list resources id contact will be assigned to"
      favorited:
        type: "boolean"
        example: false
        description: "Is contact favorited"
      blocked:
        type: "boolean"
        example: false
        description: "Is contact blocked for outgoing and incoming messaging"
      type:
        type: "integer"
        example: 1
        description: "Force type of phone. Possible values: 0 - landline, 1 - mobile.\
          \ Default is -1 (auto detection)"
      customFieldValues:
        type: "object"
        example:
          2: "My test custom value for custom field with id 2"
          5: "My test custom value for custom field with id 5"
        properties: {}
      local:
        type: "integer"
        example: 0
        description: "Treat phone number passed in request body as local"
      country:
        type: "string"
        example: "US"
        description: "2-letter ISO country code for local phone numbers, used when\
          \ local is  set to true. Default is account country"
    example:
      firstName: "Example first name"
      lastName: "Example first name"
      country: "US"
      blocked: false
      customFieldValues:
        2: "My test custom value for custom field with id 2"
        5: "My test custom value for custom field with id 5"
      phone: "+23058300573"
      lists: "1,2,3,4"
      companyName: "My pretty company"
      type: 1
      email: "test@test.com"
      local: 0
      favorited: false
  UpdateContactInputObject:
    required:
    - "lists"
    - "phone"
    properties:
      firstName:
        type: "string"
        example: "Example first name"
        description: "Contact first name"
      lastName:
        type: "string"
        example: "Example first name"
        description: "Contact last name"
      phone:
        type: "string"
        example: "+23058300573"
        description: "Contact phone number in E.164 (international) format without\
          \ leading + or zeroes"
      email:
        type: "string"
        format: "email"
        example: "test@test.com"
        description: "Contact email"
      companyName:
        type: "string"
        example: "My pretty company"
        description: "Contact company name"
      lists:
        type: "string"
        example: "1,2,3,4"
        description: "Array of list resources id contact will be assigned to"
      favorited:
        type: "boolean"
        example: false
        description: "Is contact favorited"
      blocked:
        type: "boolean"
        example: false
        description: "Is contact blocked for outgoing and incoming messaging"
      type:
        type: "integer"
        example: 1
        description: "Force type of phone. Possible values: 0 - landline, 1 - mobile.\
          \ Default is -1 (auto detection)"
      customFieldValues:
        type: "object"
        example:
          2: "My test custom value for custom field with id 2"
          5: "My test custom value for custom field with id 5"
        properties: {}
      local:
        type: "integer"
        example: 0
        description: "Treat phone number passed in request body as local"
      country:
        type: "string"
        example: "US"
        description: "2-letter ISO country code for local phone numbers, used when\
          \ local is  set to true. Default is account country"
    example:
      firstName: "Example first name"
      lastName: "Example first name"
      country: "US"
      blocked: false
      customFieldValues:
        2: "My test custom value for custom field with id 2"
        5: "My test custom value for custom field with id 5"
      phone: "+23058300573"
      lists: "1,2,3,4"
      companyName: "My pretty company"
      type: 1
      email: "test@test.com"
      local: 0
      favorited: false
  DeleteContactsByIdsInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
    example:
      all: false
      ids: "1,2,3"
  CreateCustomFieldInputObject:
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Test custom field"
        description: "Custom field name"
    example:
      name: "Test custom field"
  UpdateCustomFieldInputObject:
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Test custom field"
        description: "Custom field name"
    example:
      name: "Test custom field"
  UpdateCustomFieldValueInputObject:
    properties:
      contactId:
        type: "integer"
        example: 5
      value:
        type: "string"
        example: "Test custom field value"
    example:
      contactId: 5
      value: "Test custom field value"
  UnsubscribeContactInputObject:
    properties:
      phone:
        type: "string"
        example: "+14153288240"
        description: "Contact phone number"
      blockIncoming:
        type: "integer"
        example: 0
        description: "Default is 0 (false). If set to 1 incoming messages from this\
          \ number will be blocked."
    example:
      blockIncoming: 0
      phone: "+14153288240"
  BlockContactInputObject:
    properties:
      phone:
        type: "string"
        example: "+14153288240"
        description: "Contact phone number"
    example:
      phone: "+14153288240"
  UnblockContactInputObject:
    properties:
      phone:
        type: "string"
        example: "+14153288240"
        description: "Contact phone number"
    example:
      phone: "+14153288240"
  UnblockContactsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "integer"
        example: 0
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
    example:
      all: 0
      ids: "1,2,3"
  CreateContactNoteInputObject:
    properties:
      note:
        type: "string"
        example: "My new note"
    example:
      note: "My new note"
  UpdateContactNoteInputObject:
    required:
    - "note"
    properties:
      note:
        type: "string"
        example: "My new note"
    example:
      note: "My new note"
  DeleteContactNotesBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: true
        description: "Entity ID(s), separated by comma"
    example:
      all: true
      ids: "1,2,3"
  CreateListInputObject:
    required:
    - "name"
    - "shared"
    properties:
      name:
        type: "string"
        example: "New test list"
        description: "List name"
      shared:
        type: "boolean"
        example: true
        description: "Should this list be shared with sub-accounts"
      favorited:
        type: "boolean"
        example: true
        description: "Is list favorited. Default is false"
        default: false
      isDefault:
        type: "boolean"
        example: true
        description: "Is list default for new contacts (web only)."
        default: false
    example:
      shared: true
      isDefault: true
      name: "New test list"
      favorited: true
  AssignContactsToListInputObject:
    required:
    - "contacts"
    properties:
      contacts:
        type: "string"
        example: "1,2"
    example:
      contacts: "1,2"
  ClearAndAssignContactsToListInputObject:
    required:
    - "contacts"
    properties:
      contacts:
        type: "string"
        example: "1,2"
    example:
      contacts: "1,2"
  deleteContacsFromListObject:
    required:
    - "contacts"
    properties:
      contacts:
        type: "string"
        example: "1,2"
  updateListObject:
    required:
    - "name"
    - "shared"
    properties:
      name:
        type: "string"
        example: "New test list"
        description: "List name"
      shared:
        type: "boolean"
        example: true
        description: "Should this list be shared with sub-accounts"
      favorited:
        type: "boolean"
        example: true
        description: "Is list favorited. Default is false"
        default: false
      isDefault:
        type: "boolean"
        example: true
        description: "Is list default for new contacts (web only)."
        default: false
  DeleteListsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "integer"
        example: 0
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
    example:
      all: 0
      ids: "1,2,3"
  DeleteListContactsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "integer"
        example: 0
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
    example:
      all: 0
      ids: "1,2,3"
  CreateTemplateInputObject:
    required:
    - "content"
    - "name"
    properties:
      name:
        type: "string"
        example: "New template name"
        description: "Template name"
      content:
        type: "string"
        example: "New template content"
        description: "Template text. May contain tags inside braces"
    example:
      name: "New template name"
      content: "New template content"
  UpdateTemplateInputObject:
    required:
    - "content"
    - "name"
    properties:
      name:
        type: "string"
        example: "New template name"
        description: "Template name"
      content:
        type: "string"
        example: "New template content"
        description: "Template text. May contain tags inside braces"
    example:
      name: "New template name"
      content: "New template content"
  DeleteTemplatesBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: true
        description: "Entity ID(s), separated by comma"
    example:
      all: true
      ids: "1,2,3"
  SendMessageInputObject:
    properties:
      text:
        type: "string"
        example: "Test message test"
        description: "Message text. Required if template_id is not set"
      templateId:
        type: "integer"
        example: 1
        description: "Template used instead of message text. Required if text is not\
          \ set"
      sendingTime:
        type: "integer"
        example: 1565606455
        description: "DEPRECATED, consider using sendingDateTime and sendingTimezone\
          \ parameters instead: Optional (required with rrule set). Message sending\
          \ time in unix timestamp format. Default is now"
      sendingDateTime:
        type: "string"
        example: "2020-05-27 13:02:33"
        description: "Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33).\
          \ This time is relative to sendingTimezone"
      sendingTimezone:
        type: "string"
        example: "America/Buenos_Aires"
        description: "ID or ISO-name of timezone used for sending when sendingDateTime\
          \ parameter is set. E.g. if you specify sendingDateTime = \\\"2016-05-27\
          \ 13:02:33\\\" and sendingTimezone = \\\"America/Buenos_Aires\\\", your\
          \ message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33\
          \ UTC. Default is account timezone"
      contacts:
        type: "string"
        example: "1,2,3,4"
        description: "Comma separated array of contact resources id message will be\
          \ sent to"
      lists:
        type: "string"
        example: "1,2,3,4"
        description: "Comma separated array of list resources id message will be sent\
          \ to"
      phones:
        type: "string"
        example: "+19993322111,+19993322110"
        description: "Comma separated array of E.164 phone numbers message will be\
          \ sent to"
      cutExtra:
        type: "boolean"
        example: true
        description: "Should sending method cut extra characters which not fit supplied\
          \ partsCount or return 400 Bad request response instead. Default is false"
      partsCount:
        type: "integer"
        example: 6
        description: "Maximum message parts count (TextMagic allows sending 1 to 6\
          \ message parts). Default is 6"
      referenceId:
        type: "integer"
        example: 1
        description: "Custom message reference id which can be used in your application\
          \ infrastructure"
      from:
        type: "string"
        example: "Test sender id"
        description: "One of allowed Sender ID (phone number or alphanumeric sender\
          \ ID). If specified Sender ID is not allowed for some destinations, a fallback\
          \ default Sender ID will be used to ensure delivery"
      rule:
        type: "string"
        example: "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1"
        description: "iCal RRULE parameter to create recurrent scheduled messages.\
          \ When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator\
          \ for format details"
      createChat:
        type: "boolean"
        example: false
        description: "Should sending method try to create new Chat(if not exist) with\
          \ specified recipients. Default is false"
      tts:
        type: "boolean"
        example: false
        description: "Send Text to Speech message. Default is false"
      local:
        type: "boolean"
        example: false
        description: "Treat phone numbers passed in \\'phones\\' field as local. Default\
          \ is false"
      localCountry:
        type: "string"
        example: "US"
        description: "2-letter ISO country code for local phone numbers, used when\
          \ \\'local\\' is set to true. Default is account country"
    example:
      createChat: false
      partsCount: 6
      sendingDateTime: "2020-05-27 13:02:33"
      phones: "+19993322111,+19993322110"
      rule: "FREQ=YEARLY;BYMONTH=1;BYMONTHDAY=1;COUNT=1"
      cutExtra: true
      templateId: 1
      sendingTime: 1565606455
      referenceId: 1
      local: false
      tts: false
      sendingTimezone: "America/Buenos_Aires"
      localCountry: "US"
      lists: "1,2,3,4"
      from: "Test sender id"
      text: "Test message test"
      contacts: "1,2,3,4"
  DeleteOutboundMessagesBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "integer"
        example: 1
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
    example:
      all: 1
      ids: "1,2,3"
  DeleteMessageSessionsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "integer"
        example: 0
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
    example:
      all: 0
      ids: "1,2,3"
  DeleteScheduledMessagesBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "integer"
        example: 0
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
      status:
        type: "string"
        description: "Default is empty string (false). If set then all entities with\
          \ specified status will be affected."
        default: ""
    example:
      all: 0
      ids: "1,2,3"
      status: "status"
  DeleteInboundMessagesBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "integer"
        example: 0
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
    example:
      all: 0
      ids: "1,2,3"
  MuteChatInputObject:
    required:
    - "id"
    - "mute"
    properties:
      id:
        type: "integer"
        example: 1
        description: "Chat ID"
      mute:
        type: "boolean"
        example: true
        description: "Mute value"
      for:
        type: "integer"
        example: 1
        description: "Mute for N hours"
    example:
      for: 1
      mute: true
      id: 1
  MuteChatsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
      for:
        type: "integer"
        example: 1
        description: "Mute for N hours"
    example:
      all: false
      for: 1
      ids: "1,2,3"
  UnmuteChatsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
    example:
      all: false
      ids: "1,2,3"
  MarkChatsUnreadBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
    example:
      all: false
      ids: "1,2,3"
  MarkChatsReadBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
    example:
      all: false
      ids: "1,2,3"
  CloseChatsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
    example:
      all: false
      ids: "1,2,3"
  ReopenChatsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
    example:
      all: false
      ids: "1,2,3"
  SetChatStatusInputObject:
    required:
    - "id"
    - "status"
    properties:
      id:
        type: "integer"
        example: 1
        description: "Chat ID"
      status:
        type: "string"
        example: "a"
        description: "Status"
        enum:
        - "a"
        - "c"
        - "d"
    example:
      id: 1
      status: "a"
  DeleteChatsBulkInputObject:
    properties:
      ids:
        type: "string"
        example: "1,2,3"
        description: "Entity ID(s), separated by comma"
      all:
        type: "boolean"
        example: false
        description: "Entity ID(s), separated by comma"
      status:
        type: "string"
        example: "a"
        description: "Default is empty string (false). If set then all entities with\
          \ specified status will be affected."
        enum:
        - "a"
        - "c"
        - "d"
    example:
      all: false
      ids: "1,2,3"
      status: "a"
  DeleteChatMessagesBulkInputObject:
    properties:
      inbound_ids:
        type: "string"
        example: "1,2,3,4"
        description: "Inbound messages ID(s) to delete. Require when \"all\" equal\
          \ to 0 (false)."
      sent_ids:
        type: "string"
        example: "1,2,3,4"
        description: "Sent messages ID(s) to delete. Require when \"all\" equal to\
          \ 0 (false)."
      calls_ids:
        type: "string"
        example: "1,2,3,4"
        description: "Calls ID(s) to delete. Require when \"all\" equal to 0 (false)."
      all:
        type: "boolean"
        example: false
        description: "Default is 0 (false). If set to 1 all the entities will be removed."
    example:
      sent_ids: "1,2,3,4"
      all: false
      calls_ids: "1,2,3,4"
      inbound_ids: "1,2,3,4"
  CreateSurveyInputObject:
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "Test survey"
        description: "Survey name"
    example:
      name: "Test survey"
  UpdateSurveyInputObject:
    required:
    - "name"
    properties:
      name:
        type: "string"
        example: "New test name"
        description: "Survey name"
      contacts:
        type: "string"
        example: "1,2,3,4"
        description: "Array of contact resources id message will be sent to"
      lists:
        type: "string"
        example: "1,2,3,4"
        description: "Array of list resources id message will be sent to"
      phones:
        type: "string"
        example: "+19998887766,+19998887755"
        description: "Array of E.164 phone numbers message will be sent to"
      country:
        type: "object"
        example:
          GB: 123
          US: 123
        description: "Country values mapping (country => inbound phone id), e.g. country[GB]\
          \ = \"123\", country[US] = \"123\""
        properties: {}
    example:
      country:
        GB: 123
        US: 123
      lists: "1,2,3,4"
      name: "New test name"
      phones: "+19998887766,+19998887755"
      contacts: "1,2,3,4"
  CreateSurveyNodeInputObject:
    properties:
      nodeType:
        type: "string"
        example: "q"
        description: "Node type. \\'a\\' answer; \\'q\\' - question"
        enum:
        - "a"
        - "q"
      label:
        type: "string"
        example: "Question 1"
        description: "Node label"
      body:
        type: "string"
        example: "Test node body"
        description: "Node body"
      startNode:
        type: "integer"
        example: 1
        description: "Start node id"
      sendDelay:
        type: "integer"
        example: 1
        description: "Define delay for sending question to recipients after previous\
          \ answer. Default is 0"
    example:
      startNode: 1
      label: "Question 1"
      nodeType: "q"
      body: "Test node body"
      sendDelay: 1
  UpdateSurveyNodeInputObject:
    properties:
      label:
        type: "string"
        example: "Question 1"
        description: "Node label"
      isEndNode:
        type: "boolean"
        example: false
        description: "Define node is ending for survey. Default is false"
      body:
        type: "string"
        example: "Test node body"
        description: "Node body"
      sendDelay:
        type: "integer"
        example: 1
        description: "Define delay for sending question to recipients after previous\
          \ answer. Default is 0"
    example:
      isEndNode: false
      label: "Question 1"
      body: "Test node body"
      sendDelay: 1
  MergeSurveyNodesInputObject:
    required:
    - "firstNode"
    - "secondNode"
    properties:
      firstNode:
        type: "integer"
        example: 1
        description: "First node id"
      secondNode:
        type: "integer"
        example: 2
        description: "Second node id"
    example:
      secondNode: 2
      firstNode: 1
  BadRequestResponse_errors:
    properties:
      common:
        type: "array"
        example:
        - "Common error message 1"
        - "Common error message 2"
        items:
          type: "string"
      fields:
        type: "object"
        example:
          fieldName1:
          - "Error message 1"
          - "Error message 2"
          fieldName2:
          - "Error message 3"
          - "Error message 4"
        properties: {}
  DoAuthResponse_minVersions:
    required:
    - "android"
    - "desktop"
    - "ios"
    properties:
      ios:
        type: "integer"
        example: 0
      android:
        type: "integer"
        example: 0
      desktop:
        type: "integer"
        example: 0
    example:
      desktop: 0
      android: 0
      ios: 0
  MessagesIcs_parameters_recipients:
    required:
    - "contacts"
    - "groups"
    - "numbers"
    properties:
      contacts:
        type: "array"
        items:
          type: "integer"
          example: 39318
      groups:
        type: "array"
        items:
          type: "integer"
          example: 39318
      numbers:
        type: "array"
        items:
          type: "string"
          example: "19993322111"
    example:
      numbers:
      - "19993322111"
      - "19993322111"
      groups:
      - 39318
      - 39318
      contacts:
      - 39318
      - 39318
  MessagesIcs_parameters:
    required:
    - "recipients"
    - "text"
    properties:
      text:
        type: "string"
        example: "Sample text"
      recipients:
        $ref: "#/definitions/MessagesIcs_parameters_recipients"
    example:
      recipients:
        numbers:
        - "19993322111"
        - "19993322111"
        groups:
        - 39318
        - 39318
        contacts:
        - 39318
        - 39318
      text: "Sample text"
  MessagesIcs_textParameters:
    required:
    - "chars"
    - "charsetLabel"
    - "cost"
    - "countries"
    - "encoding"
    - "parts"
    properties:
      cost:
        type: "number"
        example: 0.025
        x-nullable: true
      parts:
        type: "integer"
        example: 6
        x-nullable: true
      chars:
        type: "integer"
        example: 5
        x-nullable: true
      encoding:
        type: "string"
        example: "ISO-8859-1"
        x-nullable: true
      countries:
        type: "array"
        items:
          type: "string"
          example: "US"
        x-nullable: true
      charsetLabel:
        type: "string"
        example: "ISO-8859-1"
        x-nullable: true
    example:
      cost: 0.025
      parts: 6
      countries:
      - "US"
      - "US"
      encoding: "ISO-8859-1"
      charsetLabel: "ISO-8859-1"
      chars: 5
externalDocs:
  description: "Old API documentation"
  url: "http://docs.textmagictesting.com/"
x-ignoredHeaderParameters:
- "X-Ignore-Null-Values"
x-tagGroups:
- name: "Messaging"
  tags:
  - "Outbound Messages"
